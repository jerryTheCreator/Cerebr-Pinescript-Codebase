
//@version=4
study("EMA AND WAVETREND", overlay=1)

//*************** GENERAL ***************//
// {
    
//FUNCTIONS
// {
htf(_res, _exp, gaps_on)  => gaps_on == 0 ? security(syminfo.tickerid, _res, _exp) :
  gaps_on == true ? security(syminfo.tickerid, _res, _exp, barmerge.gaps_on, barmerge.lookahead_off ) : 
  security(syminfo.tickerid, _res, _exp, barmerge.gaps_off, barmerge.lookahead_off )
  
barInZone(_top, _bott, _index) => _index == 0 ? (high <= _top and high >= _bott ) or 
  ( low <= _top and low >= _bott) or (high >= _top and low <= _bott) : 
  (high[_index] <= _top and high[_index] >= _bott ) or 
  ( low[_index] <= _top and low[_index] >= _bott) or (high[_index] >= _top and low[_index] <= _bott)
  
znInZone(_top, _bott, _top2, _bott2) => (_top2 <= _top and _top2 >= _bott ) or ( _bott2 <= _top and _bott2 >= _bott) or (_top2 >= _top and _bott2 <= _bott)

lineInZone(_top, _bott, _line) => (_line <= _top and _line >= _bott )

// }

//INPUT
// {
useMeth = input("Strategy 1", "Choose the Strategy", options=["Strategy 1", "Strategy 2"])
useStrict = input(false, "Use Strict Rules for Strategy 2")

optLen = input(6, "Binary Option Period", group="BINARY OPTIONS")
// }

// }

//*************** INDICATORS ***************//
// {

//***** HMA *****//
// {
hmaSrc = close
hmaLen = input(200, "HMA Period", group = "HMA")
hmaRes = input("", "HMA Timeframe", input.resolution, group = "HMA")
period = input(2, "Rise or Fall Period", input.integer, group = "HMA")

//*************************************************//

hma = hmaRes != "" ? htf(hmaRes, hma(hmaSrc, hmaLen), true) : hma(hmaSrc, hmaLen)
hmaRise = rising(hma, period)
hmaFall = falling(hma, period)

plot(hma, color= hmaRise ? color.lime : color.maroon, linewidth=2)
// }
// Signals ==> hmaFall and hmaRise

//***** EMA *****//
// {

fEmaRes = input("", "Fast EMA Timeframe", input.resolution)
fEmaLen = input(20, "Fast EMA Length", input.integer, minval=1)

sEmaRes = input("", "Slow EMA Timeframe", input.resolution)
sEmaLen = input(120, "Slow EMA Length", input.integer, minval=1)

fMa = fEmaRes == "" ? ema(close, fEmaLen) : htf(fEmaRes, ema(close, fEmaLen), true)
sMa = sEmaRes == "" ? ema(close, sEmaLen) : htf(sEmaRes, ema(close, sEmaLen), true)

plot(fMa)
plot(sMa)
// }
// Signals ==> fMa, sMa

//***** MACD *****//
// {

/// INPUTS
// {
macdRes = input("", " MACD TimeFrame", input.resolution, group="MACD")
macdflen = input(12, "MACD Fast MA", input.integer, group="MACD")
macdslen = input(25, "macd Slow MA", input.integer, group="MACD")
siglen = input(9, "MACD signal Line", input.integer, group="MACD")
// }

// MACD FUNCTIONS
// {
_macd() =>
    macdSrc     = close
    FastMa = ema(macdSrc, macdflen)
    SlowMa = ema(macdSrc, macdslen)
    macd    = FastMa - SlowMa
    macd
    
_signal() =>
    macdSrc     = close
    FastMa = ema(macdSrc, macdflen)
    SlowMa = ema(macdSrc, macdslen)
    macd    = FastMa - SlowMa
    signal  = ema(macd, siglen)
    signal 

_color() =>
    macdSrc     = close
    FastMa = ema(macdSrc, macdflen)
    SlowMa = ema(macdSrc, macdslen)
    macd    = FastMa - SlowMa
    signal  = ema(macd, siglen)
    hist    = macd - signal
    (hist>=0 ? (hist[1] < hist ? #26A69A : #B2DFDB) : (hist[1] < hist ? #FFCDD2 : #EF5350) )

// }

// CALCULATION
// {
macd   = macdRes != "" ? htf(macdRes, _macd(), true) : _macd()
signal = macdRes != "" ? htf(macdRes, _signal(), true) : _signal()
hist    = macdRes != "" ? htf(macdRes, macd - signal, 0) : macd - signal

histIncBelow = macdRes != "" ? htf(macdRes, rising(hist, 1), 0) and hist < 0 : rising(hist, 1) and hist < 0 
histDecBelow = macdRes != "" ? htf(macdRes, falling(hist, 1), 0) and hist < 0 : falling(hist, 1) and hist < 0 
histIncAbove = macdRes != "" ? htf(macdRes, rising(hist, 1), 0) and hist > 0 : rising(hist, 1) and hist > 0
histDecAbove = macdRes != "" ? htf(macdRes, falling(hist, 1), 0) and hist > 0 : falling(hist, 1) and hist > 0
// }


// }
// Signals ==> histIncBelow, histDecBelow, histIncAbove, histDecAbove

//***** WAVE TREND *****//
// {

wtRes = input("", "Wave Trend Timeframe", input.resolution, group="WAVE TREND")
wtChannelLen = input(10, "Channel Length", group="WAVE TREND")
wtAvgLen = input(21, "Average Length", group="WAVE TREND")
wtOb = input(30, "WT Overbought", group="WAVE TREND")
wtOs = input(-30, "WT Oversold", group="WAVE TREND")
wtUseObOs = input(false, "Use Wave Trend Overbought/Oversold Levels", group="WAVE TREND")
 
wtSrc = htf(wtRes, hlc3, false)
wtEsa = htf(wtRes, ema(wtSrc, wtChannelLen), false)
d = htf(wtRes, ema(abs(wtSrc - wtEsa), wtChannelLen), false)
ci = (wtSrc - wtEsa) / (0.015 * d)
tci = ema(ci, wtAvgLen)

wtLine = tci
wtSignal = sma(wtLine,4)
wtHist = wtLine - wtSignal

isWtOb = wtUseObOs ? wtLine >= wtOb : wtLine >= 0
isWtOs = wtUseObOs ? wtLine <= wtOs : wtLine <= 0

wtLong = crossover(wtLine, wtSignal) and isWtOs
wtShort = crossunder(wtLine, wtSignal) and isWtOb

// }
// Signals ==> wtLong, wtShort

//***** FAST KELTNER CHANNEL *****//
// {
fastkCRes = input("", "HTF Timeframe", input.resolution, group="KELTNER CHANNEL")
fastkCSrc = close
fastkCLength = fEmaLen
fastkCMult = input(0.5, "HTF Multiplier", input.float, step=0.05, minval=0.05, group="KELTNER CHANNEL")
fastkCRange = input("ATR", "Range Style", options=["ATR", "True Range", "Bar Width"], group="KELTNER CHANNEL")
fastkCRangeLen = input(10, "Range Period", group="KELTNER CHANNEL")

f_kc(src, length, mult, kcRange, rangeLen, res) =>
    float basis = security(syminfo.tickerid, res, ema(src, length), barmerge.gaps_off, barmerge.lookahead_off)
    float span = kcRange == "ATR" ? security(syminfo.tickerid, res, atr(rangeLen), barmerge.gaps_off, barmerge.lookahead_off) : 
      kcRange == "True Range" ? security(syminfo.tickerid, res, tr, barmerge.gaps_off, barmerge.lookahead_off) : 
      kcRange == "Bar Width" ? security(syminfo.tickerid, res, (high - low), barmerge.gaps_off, barmerge.lookahead_off) : na
      
    float rangeEma = ema(span, length)
    
    security(syminfo.tickerid, res, (high - low), barmerge.gaps_off, barmerge.lookahead_off)
    
    
    upperKC = basis + (rangeEma * mult)
    middleKC = basis
    lowerKC = basis - (rangeEma * mult)
    
    [middleKC, upperKC, lowerKC]
    
    
[fastkCMiddle, fastkCUpper, fastkCLower] = f_kc(fastkCSrc, fastkCLength, fastkCMult, fastkCRange, fastkCRangeLen, fastkCRes)
//}
//Buffers ==> fastkCMiddle, fastkCUpper, fastkCLower

//***** SLOW KELTNER CHANNEL *****//
// {
slowkCRes = input("", "HTF Timeframe", input.resolution, group="SLOW KELTNER CHANNEL")
slowkCSrc = close
slowkCLength = sEmaLen
slowkCMult = input(0.5, "HTF Multiplier", input.float, step=0.05, minval=0.05, group="SLOW KELTNER CHANNEL")
slowkCRange = input("ATR", "Range Style", options=["ATR", "True Range", "Bar Width"], group="SLOW KELTNER CHANNEL")
slowkCRangeLen = input(10, "Range Period", group="SLOW KELTNER CHANNEL")
    
[slowkCMiddle, slowkCUpper, slowkCLower] = f_kc(slowkCSrc, slowkCLength, slowkCMult, slowkCRange, slowkCRangeLen, slowkCRes)
//}
//Buffers ==> slowkCMiddle, slowkCUpper, slowkCLower

// }

//*************** STRATEGY EXECUTION ***************//
// {

meth1Long = hmaRise and (fMa > sMa) and (not barInZone(slowkCUpper, slowkCLower, 0)) and wtLong and histIncBelow 
meth1Short = hmaFall and (fMa < sMa) and (not barInZone(slowkCUpper, slowkCLower, 0)) and wtShort and histDecAbove 

meth2Long = useStrict ? (fMa > sMa) and barInZone(fastkCUpper, fastkCLower, 0) and (not lineInZone(fastkCUpper, fastkCLower, sMa)) and wtLong : 
  (fMa > sMa) and barInZone(fastkCUpper, fastkCLower, 0) and wtLong
  
meth2Short = useStrict ? (fMa < sMa) and barInZone(fastkCUpper, fastkCLower, 0) and (not lineInZone(fastkCUpper, fastkCLower, sMa)) and wtShort : 
  (fMa < sMa) and barInZone(fastkCUpper, fastkCLower, 0) and wtShort

goLong = useMeth == "Strategy 1" ? meth1Long : meth2Long
goShort = useMeth == "Strategy 1" ? meth1Short : meth2Short

// }

//*************** OPTION SCANNER ***************//
//{

gain = bool(na)
loss = bool(na)

var countGain = 0

var countLoss = 0

if goLong[optLen + 1]
    if close[1] > open[optLen]
        gain := true
        countGain := countGain + 1
    else
        loss := true
        countLoss := countLoss + 1
    

if goShort[optLen + 1]
    if close[1] < open[optLen]
        gain := true
        countGain := countGain + 1
    else
        loss := true 
        countLoss := countLoss + 1

plotshape(gain, "Gain", shape.flag, location.top, color.lime, size = size.small)
plotshape(loss, "Loss", shape.flag, location.top, color.maroon, size = size.small)
plot(countGain, color=color.new(color.olive, 100), display=false)
plot(countLoss, color=color.new(color.purple, 100), display=false)

//}


//*************** PLOTS ***************//
// {

plot(na)

plotshape(goLong, "Long", shape.triangleup, location.belowbar, color.lime, size = size.small)
plotshape(goShort, "Short", shape.triangledown, location.abovebar, color.maroon, size = size.small)
// }