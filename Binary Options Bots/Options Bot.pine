
//@version=4
study("Options Bot 1", overlay=1)

//*************** GENERAL INPUTS ***************//
//{

// FUNCTIONS
// {

htf(_res, _exp, gaps_on)  => gaps_on == 0 ? security(syminfo.tickerid, _res, _exp) :
  gaps_on == true ? security(syminfo.tickerid, _res, _exp, barmerge.gaps_on, barmerge.lookahead_off ) : 
  security(syminfo.tickerid, _res, _exp, barmerge.gaps_off, barmerge.lookahead_off )

InZone(_top, _bott, _index) => _index == 0 ? (high <= _top and high >= _bott ) or 
  ( low <= _top and low >= _bott) or (high >= _top and low <= _bott) : 
  (high[_index] <= _top and high[_index] >= _bott ) or 
  ( low[_index] <= _top and low[_index] >= _bott) or (high[_index] >= _top and low[_index] <= _bott)

//}

// INPUTS
// {
gaps = input(false, "Gaps", group="GENERAL SETTINGS")
useMeth = input("1 and 2", "Choose What Method to Apply", options=["1 Only", "2 Only", "1 and 2"], group="GENERAL SETTINGS" )
//}

//}

//*************** INDICATORS ***************//
//{

// MOVING AVERAGE
// {
maRes = input("60", "MA Timeframe", input.resolution, group="MOVING AVERAGE")
maLen = input(20, "MA Length", input.integer, group="MOVING AVERAGE")

htfMa = htf(maRes, ema(close, maLen), gaps)
//}
//Buffers ==> htfMa

// KELTNER CHANNEL
// {
kCRes = input("15", "HTF Timeframe", input.resolution, group="KELTNER CHANNEL")
kCSrc = close
kCLength = input(9, "HTF Length", group="HTF KELTNER CHANNEL")
kCMult = input(0.2, "HTF Multiplier", input.float, step=0.05, minval=0.05, group="KELTNER CHANNEL")
kCRange = input("ATR", "Range Style", options=["ATR", "True Range", "Bar Width"], group="KELTNER CHANNEL")
kCRangeLen = input(10, "Range Period", group="KELTNER CHANNEL")

f_kc(src, length, mult, kcRange, rangeLen, res) =>
    float basis = security(syminfo.tickerid, res, ema(src, length), barmerge.gaps_off, barmerge.lookahead_off)
    float span = kcRange == "ATR" ? security(syminfo.tickerid, res, atr(rangeLen), barmerge.gaps_off, barmerge.lookahead_off) : 
      kcRange == "True Range" ? security(syminfo.tickerid, res, tr, barmerge.gaps_off, barmerge.lookahead_off) : 
      kcRange == "Bar Width" ? security(syminfo.tickerid, res, (high - low), barmerge.gaps_off, barmerge.lookahead_off) : na
      
    float rangeEma = ema(span, length)
    
    security(syminfo.tickerid, res, (high - low), barmerge.gaps_off, barmerge.lookahead_off)
    
    
    upperKC = basis + (rangeEma * mult)
    middleKC = basis
    lowerKC = basis - (rangeEma * mult)
    
    [middleKC, upperKC, lowerKC]
    
    
[kCMiddle, kCUpper, kCLower] = f_kc(kCSrc, kCLength, kCMult, kCRange, kCRangeLen, kCRes)
//}
//Buffers ==> kCMiddle, kCUpper, kCLower

// MACD
// {

/// INPUTS
// {
macdRes = input("30", " MACD TimeFrame", input.resolution, group="MACD")
macdflen = input(12, "MACD Fast MA", input.integer, group="MACD")
macdslen = input(25, "macd Slow MA", input.integer, group="MACD")
siglen = input(9, "MACD signal Line", input.integer, group="MACD")
//}

// MACD FUNCTIONS
// {
_macd() =>
    macdSrc     = close
    FastMa = ema(macdSrc, macdflen)
    SlowMa = ema(macdSrc, macdslen)
    macd    = FastMa - SlowMa
    macd
    
_signal() =>
    // Calculating
    macdSrc     = close
    FastMa = ema(macdSrc, macdflen)
    SlowMa = ema(macdSrc, macdslen)
    macd    = FastMa - SlowMa
    signal  = ema(macd, siglen)
    signal 

_color() =>
    // Calculating
    macdSrc     = close
    FastMa = ema(macdSrc, macdflen)
    SlowMa = ema(macdSrc, macdslen)
    macd    = FastMa - SlowMa
    signal  = ema(macd, siglen)
    hist    = macd - signal
    (hist>=0 ? (hist[1] < hist ? #26A69A : #B2DFDB) : (hist[1] < hist ? #FFCDD2 : #EF5350) )

//}

// CALCULATION
// {
macd   = htf(macdRes, _macd(), true)
signal = htf(macdRes, _signal(), true)
hist    = htf(macdRes, macd - signal, 0)

histIncBelow = htf(macdRes, rising(hist, 1), 0) and hist < 0
histDecBelow = htf(macdRes, falling(hist, 1), 0) and hist < 0
histIncAbove = htf(macdRes, rising(hist, 1), 0) and hist > 0
histDecAbove = htf(macdRes, falling(hist, 1), 0) and hist > 0
//}


//}
//Signals ==> histIncBelow, histDecBelow, histIncAbove, histDecAbove

//WAVETREND 
// {
wtChannelLen = input(10, "Channel Length", group="WAVE TREND")
wtAvgLen = input(21, "Average Length", group="WAVE TREND")
 
wtSrc = hlc3 
wtEsa = ema(wtSrc, wtChannelLen)
d = ema(abs(wtSrc - wtEsa), wtChannelLen)
ci = (wtSrc - wtEsa) / (0.015 * d)
tci = ema(ci, wtAvgLen)
 
wtLine = tci
wtSignal = sma(wtLine,4)

wtLong = crossover(wtLine, wtSignal)
wtShort = crossunder(wtLine, wtSignal)

//}
//Signals ==> wtLong, wtShort

//}

//*************** STRATEGY EXECUTION ***************//
//{

meth1Long = kCLower > htfMa and InZone(kCUpper, kCLower, 0) and histIncAbove
meth1Short = kCUpper < htfMa and InZone(kCUpper, kCLower, 0) and histDecBelow 

meth2Long = histIncBelow and kCUpper < htfMa and InZone(kCUpper, kCLower, 0) and macd < 0
meth2Short = histDecAbove and kCLower > htfMa and InZone(kCUpper, kCLower, 0)  and macd > 0

trigLong = wtLong
trigShort = wtShort

goLong = 
  useMeth == "1 and 2" ? trigLong and meth1Long or meth2Long :
  useMeth == "1 Only" ? trigLong and meth1Long : 
  trigLong and meth2Long

goShort = 
  useMeth == "1 and 2" ? trigShort and meth1Short or meth2Short :
  useMeth == "1 Only" ? trigShort and meth1Short : 
  trigShort and meth2Short

//}

plotshape(goLong, "Long", shape.triangleup, location.belowbar, color.lime, size = size.small)
plotshape(goShort, "Short", shape.triangledown, location.abovebar, color.maroon, size = size.small)