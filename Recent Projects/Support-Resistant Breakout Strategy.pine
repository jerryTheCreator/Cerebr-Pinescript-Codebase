//@version=5
maxBoxes = 500, maxFvg = 500, maxLines = 500, maxBarsBack = 500
indicator("S/D Breakout", overlay=true, max_boxes_count=maxBoxes, max_bars_back=maxBarsBack, max_lines_count=maxLines)

meth_sig_line = input.string("Supply/Demand Zone", "Method for Signal Line Determination", options=["Supply/Demand Zone", 
  "CB Orderblock"], group="General Settings")
hide_all_plots = input.bool(true, "Hide All Indicator Plots", group="General Settings")

// SUPPLY/DEMAND INDICATOR
// [
show_sd_zones = meth_sig_line == "Supply/Demand Zone" ? true : false 
//input.bool(true, "Show Supply and Demand", group="Supply and Demand")

// New Demand Zone {
cond_demand =
  high>high[1] and high[1]>high[2] and 
  close>close[1] and close[1]>close[2] and 
  close>open and close[1]>open[1] and 
  close[2]>open[2] and low>open[1] and 
  low[1]>open[2] and (open+low)<(open+close)
  // }

// New Supply Low {
cond_supply = low<low[1] and low[1]<low[2] and 
  close<close[1] and close[1]<close[2] and 
  close<open and close[1]<open[1] and 
  close[2]<open[2] and high<open[1] and high[1]<open[2]
  // }
// ]

// CB ORDERBLOCK
// [

// >>>>>>>>>>>>>>> FUNCTIONS <<<<<<<<<<<<<<< //
// {
znInZone(_top, _bott, _top2, _bott2) =>
    // [
    tp1 = math.max(_top, _bott)
    bt1 = math.min(_top, _bott)
    tp2 = math.max(_top2, _bott2)
    bt2 = math.min(_top2, _bott2)

    tp2 <= tp1 and tp2 >= bt1 or bt2 <= tp1 and bt2 >= bt1 or tp2 >= tp1 and bt2 <= bt1
    // ]
    
nullbox = box.new(na, na, na, na, color(na), xloc=xloc.bar_time, bgcolor=color(na))

//Period Converter Function
//{
resToInt(_res) =>
    resInt = 0
    if _res == 'D'
        resInt := 1440
        resInt
    else if _res == 'W'
        resInt := 10080
        resInt
    else if _res == 'M'
        resInt := 43200
        resInt
    else
        resInt := math.round(str.tonumber(_res))
        resInt

    resInt

periodConv(_len, _res) =>
    xtf = math.round(str.tonumber(timeframe.period))
    htfi = resToInt(_res)

    len = xtf < htfi ? htfi * _len / xtf : na

    len
//}

// }

// >>>>>>>>>>>>>>> IMBALANCE <<<<<<<<<<<<<<< //
// {

// PARAMETERS
// {
htf = ''

plotFvgTop =  1, plotFvgBott = 1 , filtFvginFvg = false
ascColor = color(na), descColor = color(na), bodyTrans = 100, wickTrans = 100
// }

// CANDLES AND FVG SCANNING
// {

// HTF CANDLES CALCULATION AND PLOTTING
// {
ctfCandleDeltaTime() =>
    if timeframe.isseconds
        timeframe.multiplier * 1000
    else if timeframe.isminutes
        timeframe.multiplier * 1000 * 60
    else if timeframe.isdaily
        timeframe.multiplier * 1000 * 60 * 1440
    else if timeframe.isweekly
        timeframe.multiplier * 1000 * 60 * 1440 * 7
    else if timeframe.ismonthly
        timeframe.multiplier * 1000 * 60 * 1440 * 30
    else
        0

var bodies = array.new_box()
var wicks = array.new_box()
var color bodyColor = color(na)
var color wickColor = color(na)

htfO = request.security(syminfo.tickerid, htf, open)
htfH = request.security(syminfo.tickerid, htf, high)
htfL = request.security(syminfo.tickerid, htf, low)
htfC = request.security(syminfo.tickerid, htf, close)
htfOpenTime = request.security(syminfo.tickerid, htf, time)
htfCloseTime = request.security(syminfo.tickerid, htf, time_close)

if array.size(bodies) > 0 and htfOpenTime == htfOpenTime[1]
    box.delete(array.pop(bodies))
    box.delete(array.pop(wicks))
if array.size(bodies) == maxBoxes / 2
    box.delete(array.shift(bodies))
    box.delete(array.shift(wicks))

bodyTop = math.max(htfO, htfC)
bodyBottom = math.min(htfO, htfC)
wickLeft = htfOpenTime + (htfCloseTime - htfOpenTime) / 2 - ctfCandleDeltaTime()
wickRight = htfCloseTime - (htfCloseTime - htfOpenTime) / 2 + ctfCandleDeltaTime() / 2
bodyColor := htfO > htfC ? color.new(descColor, bodyTrans) : htfO < htfC ? color.new(ascColor, bodyTrans) : bodyColor
wickColor := htfO > htfC ? color.new(descColor, wickTrans) : htfO < htfC ? color.new(ascColor, wickTrans) : wickColor

wickChange = ta.barssince(ta.change(wickLeft))
var periodChecker = array.new_float(3, 0.05)
if ta.change(wickLeft)
    array.shift(periodChecker)
    array.push(periodChecker, wickChange[1] + 1)

period = array.max(periodChecker)

array.push(bodies, box.new(htfOpenTime, bodyTop, htfCloseTime, bodyBottom, bodyTop == bodyBottom ? bodyColor : color(na), xloc=xloc.bar_time, bgcolor=bodyColor))
array.push(wicks, box.new(htfOpenTime, htfH, htfCloseTime, htfL, color(na), xloc=xloc.bar_time, bgcolor=wickColor))
// }

// SCAN FOR FVG FROM BOX ARRAY
// {
w_datasize = array.size(wicks)

var upfvgBox = array.new_box()
var dnfvgBox = array.new_box()

upboxReplaced = false
dnboxReplaced = false

newFvgAbove = false
newFvgBelow = false

// FUNCTION TO CALCULATE IMBALANCES
// {

boxInx = w_datasize - 1
box1 = box(na)
box2 = box(na)
box3 = box(na)

if boxInx - 3 >= 0
    box1 := array.get(wicks, boxInx - 1)
    box3 := array.get(wicks, boxInx - 3)
    box3

hi1 = box.get_top(box1)
lo1 = box.get_bottom(box1)
hi3 = box.get_top(box3)
lo3 = box.get_bottom(box3)
op3 = box.get_left(box3)
cl1 = box.get_right(box1)

fvg = 'none'
if lo3 > hi1
    fvg := 'above'
    fvg
else if hi3 < lo1
    fvg := 'below'
    fvg

new_fvg = box(na)

if fvg == 'above'
    // PLOT THE FVG BLOCK
    new_fvg := box.new(op3, hi1, cl1, lo3, color(na), xloc=xloc.bar_time, bgcolor=color(na))
    newFvgAbove := true

    if array.size(upfvgBox) < maxBoxes / 2
        array.push(upfvgBox, new_fvg)

    else if array.size(upfvgBox) == maxBoxes / 2
        box.delete(array.shift(upfvgBox))
        upboxReplaced := true
        array.push(upfvgBox, new_fvg)

    // PLOT THE FVG BLOCK
else if fvg == 'below'
    new_fvg := box.new(op3, lo1, cl1, hi3, color(na), xloc=xloc.bar_time, bgcolor=color(na))
    newFvgBelow := true

    if array.size(dnfvgBox) < maxBoxes / 2
        array.push(dnfvgBox, new_fvg)

    else if array.size(dnfvgBox) == maxBoxes / 2
        box.delete(array.shift(dnfvgBox))
        dnboxReplaced := true
        array.push(dnfvgBox, new_fvg)
// }

// }

// }

// }

// >>>>>>>>>>>>>>> ORDER BLOCK <<<<<<<<<<<<<<< //
// {

// PARAMETERS
// {
minCand  = 3 // input.int(3, 'Minimum Candle for OB Validation', minval=2, group='ORDER BLOCK')
maxCand  = 6 // input.int(6, 'Maximum Candle for OB Validation', minval=4, maxval=10, group='ORDER BLOCK', tooltip='Value must be larger than Mininum Candle')
indLimit = 1 // input.int(1, 'No-Body Candle Buffer', tooltip='Value must be lower than Minimum Candle for OB', group='ORDER BLOCK')

useObDist = input.bool(true, 'Filter Orderblock by Reversal Magnitude', group='ORDER BLOCK: DISTANCE FILTER')
distMeth  = input.string('Candle Body', 'Method to Calculate Reversal Magnitude', options=['Candle Body', 'ATR'], group='ORDER BLOCK: DISTANCE FILTER')
distMult  = input.float(2, 'Reversal Distance Multiplier', minval=1.5, step=0.1, group='ORDER BLOCK: DISTANCE FILTER')

upCand = open < close, dnCand = open > close, neutCand = open == close
// }

// CALCULATE ORDER BLOCK INDEX
// {
bullObCandInx = minCand + 1
bearObCandInx = minCand + 1

for i = maxCand + 1 to minCand + 1 by 1
    bullCond = false

    if dnCand[i]
        bullCond := true

    if bullCond
        bullObCandInx := i
        break

for i = maxCand + 1 to minCand + 1 by 1
    bearCond = false

    if upCand[i]
        bearCond := true

    if bearCond
        bearObCandInx := i
        break
// }

// ORDER BLOCK SETUP SCANNER
// {
bullSetup = false, bearSetup = false

// FOR BUY [
bullObDist = 0

if dnCand[bullObCandInx]

    for i = maxCand to minCand by 1
        upCount = 0
        for j = i to 1 by 1
            if upCand[j]
                upCount += 1

        neutCount = 0
        for k = i to 1 by 1
            if neutCand[k]
                neutCount += 1

        if upCount == i or upCount == i - indLimit and neutCount == indLimit
            bullSetup := true
            bullObDist := i + 1
            break
    // ]

// FOR SELL [

var bearObDist = 0
if upCand[bearObCandInx]

    bearObDist := 0
    for i = maxCand to minCand by 1
        dnCount = 0
        for j = i to 1 by 1
            if dnCand[j]
                dnCount += 1

        neutCount = 0
        for k = i to 1 by 1
            if neutCand[k]
                neutCount += 1

        if dnCount == i or dnCount == i - indLimit and neutCount == indLimit
            bearSetup := true
            bearObDist := i + 1
            break
    // ]
    
// }

// REVESAL MAGNITUDE VALIDATION
// {
bullObValid = false
bearObValid = false
bullObInx = bullObDist
bearObInx = bearObDist

// Method 1: Candle Body
bullObCand_open = open[bullObInx]
bullObCand_close = close[bullObInx]

bearObCand_open = open[bearObInx]
bearObCand_close = close[bearObInx]

bullObCand_hi = high[bullObInx]
bullObCand_lo = low[bullObInx]
bearObCand_hi = high[bearObInx]
bearObCand_lo = low[bearObInx]

calcBullRevDist() =>
    totDist = float(0)
    if bullObInx != 0
        for i = bullObInx - 1 to 1 by 1
            totDist := math.abs(open[i] - close[i]) + totDist

calcBearRevDist() =>
    totDist = float(0)
    if bearObInx != 0
        for i = bearObInx - 1 to 1 by 1
            totDist := math.abs(open[i] - close[i]) + totDist
            
bullObCandDist = math.abs(bullObCand_open - bullObCand_close)
bearObCandDist = math.abs(bearObCand_open - bearObCand_close)

bullRevDist = calcBullRevDist()
bearRevDist = calcBearRevDist()

// Method 2: ATR 
distAtr = ta.atr(14)

// Conditions
if bullSetup
    if distMeth == 'Candle Body' and bullRevDist >= bullObCandDist * distMult
        bullObValid := true

    else if distMeth == 'ATR' and bullRevDist >= distAtr[bullObInx] * distMult
        bullObValid := true

if bearSetup
    if distMeth == 'Candle Body' and bearRevDist >= bearObCandDist * distMult
        bearObValid := true

    else if distMeth == 'ATR' and bearRevDist >= distAtr[bearObInx] * distMult
        bearObValid := true
// }

// ORDER BLOCK PLOTTING
// {
b_bullOb = false
b_bearOb = false

if useObDist
    if bullSetup and bullObValid
        b_bullOb := true
    if bearSetup and bearObValid
        b_bearOb := true
else
    if bullSetup
        b_bullOb := true
    if bearSetup
        b_bearOb := true

// }

// }

// >>>>>>>>>>>>>>> CB ORDER BLOCK SCANNER  <<<<<<<<<<<<<<< //
// {

// PARAMETERS
// {
useobfvg = true  
histObToSaved = 3  //input(3, "How many Order Block in History should be referenced?", input.integer, maxval=5, minval=1, group="CB Orderblock Scanner")
// }

// STORE NEW OB VALUES
// {

isBullCbOb = false
isBearCbOb = false
conv = periodConv(10, htf)

// }

// FUNCTIONAL METHOD : CURRENT TIMEFRAME
// {
upfvg_datasize = array.size(upfvgBox)
dnfvg_datasize = array.size(dnfvgBox)

count_bullObFvg = 0, count_bearObFvg = 0

if not(conv != 10)

    if b_bullOb and dnfvg_datasize > 3
        for i = bullObCandInx - 3 to 0 by 1

            if i == 0
                if newFvgBelow
                    count_bullObFvg += 1
                    isBullCbOb := true

            else if newFvgBelow[i]
                count_bullObFvg += 1
                isBullCbOb := true


    if b_bearOb and upfvg_datasize > 3
        for i = bearObCandInx - 3 to 0 by 1

            if i == 0
                if newFvgAbove
                    count_bearObFvg += 1
                    isBearCbOb := true

            else if newFvgAbove[i]
                count_bearObFvg += 1
                isBearCbOb := true

// }

// ORDER BLOCK PLOTS
// {

show_cb_ob = meth_sig_line == "CB Orderblock" ? true : false

obPlotMeth = "High/Low"// input.string('High/Low', 'What Values to use for Top/Bottom of Orderblock?', options=['High/Low', 'Open/Close', 'Dynamic Wick/Body'], group='OB Plots')

upcol = color.new(color.lime, 80)
dncol = color.new(color.red, 80)

bullCbOb = useobfvg ? isBullCbOb : b_bullOb
bearCbOb = useobfvg ? isBearCbOb : b_bearOb

bullObTop = obPlotMeth == 'High/Low' ? bullObCand_hi : 
  obPlotMeth == 'Open/Close' ? math.max(bullObCand_open, bullObCand_close) : 
  obPlotMeth == 'Dynamic Wick/Body' ? math.max(bullObCand_open, bullObCand_close) : na

bullObBott = obPlotMeth == 'High/Low' ? bullObCand_lo : 
  obPlotMeth == 'Open/Close' ? math.min(bullObCand_open, bullObCand_close) : 
  obPlotMeth == 'Dynamic Wick/Body' ? bullObCand_lo : na

bearObTop = obPlotMeth == 'High/Low' ? bearObCand_hi : 
  obPlotMeth == 'Open/Close' ? math.max(bearObCand_open, bearObCand_close) : 
  obPlotMeth == 'Dynamic Wick/Body' ? bearObCand_hi : na

bearObBott = obPlotMeth == 'High/Low' ? bearObCand_lo : 
  obPlotMeth == 'Open/Close' ? math.min(bearObCand_open, bearObCand_close) : 
  obPlotMeth == 'Dynamic Wick/Body' ? math.min(bearObCand_open, bearObCand_close) : na

obCol = (not hide_all_plots) and show_cb_ob and bullCbOb ? color.new(upcol, 90) : show_cb_ob and bearCbOb ? color.new(dncol, 90) : na
obTop = plot((not hide_all_plots) and show_cb_ob and bullCbOb ? bullObTop : show_cb_ob and bearCbOb ? bearObTop : na,
  'OB Top', bullCbOb ? upcol : bearCbOb ? dncol : na, 2, plot.style_linebr, editable=true)
obBott = plot((not hide_all_plots) and show_cb_ob and bullCbOb ? bullObBott : show_cb_ob and bearCbOb ? bearObBott : na,
  'OB Bottom', bullCbOb ? upcol : bearCbOb ? dncol : na, 2, plot.style_linebr, editable=true)

fill(obTop, obBott, obCol, "OB Fill")

// }

// } 

// >>>>>>>>>>>>>>> SIGNAL GENERATION  <<<<<<<<<<<<<<< //
// {
i_entBuffer = input.string('Orderblock High/Low', 'Source of Signal Lines', options=['Orderblock High/Low', 'Closest FVG to Orderblock'], group='OB Plots')
show_cb_line = input.bool(false, "Show Orderblock Signal Lines", group="OB Plots")

// Set Limit Order At Valid CB Orderblock or Associated FVG
// {
sig_line_bull = float(na), sig_line_bear = float(na)
new_bull = false, new_bear = false

if (dnfvg_datasize > 2) and (bullCbOb and count_bullObFvg > 0)

    sig_line_bull := 
      i_entBuffer == 'Closest FVG to Orderblock' ? box.get_top(array.get(dnfvgBox, array.size(dnfvgBox) - count_bullObFvg)) : 
      i_entBuffer == 'Average of FVGs' ? (box.get_top(array.get(dnfvgBox, array.size(dnfvgBox) - 1)) + 
      box.get_top(array.get(dnfvgBox, array.size(dnfvgBox) - count_bullObFvg))) / 2 : 
      i_entBuffer == 'Orderblock High/Low' ? bullObCand_lo : na
      
    new_bull := true

if (upfvg_datasize > 2) and (bearCbOb and count_bearObFvg > 0)

    sig_line_bear := 
      i_entBuffer == 'Closest FVG to Orderblock' ? box.get_bottom(array.get(upfvgBox, array.size(upfvgBox) - count_bearObFvg)) : 
      i_entBuffer == 'Average of FVGs' ? (box.get_bottom(array.get(upfvgBox, array.size(upfvgBox) - 1)) + 
      box.get_bottom(array.get(upfvgBox, array.size(upfvgBox) - count_bearObFvg))) / 2 : 
      i_entBuffer == 'Orderblock High/Low' ? bearObCand_hi : na
    
    new_bear := true
    
sig_line_bull := fixnan(sig_line_bull)
sig_line_bear := fixnan(sig_line_bear)
// }

// }

// ]

// BREAKOUT FINDER 
// [
tip_mintest = "This is the minimum number of times a price level should have been tested, before it is qualified as a Support/Resistance Level"
tip_max_boLen = "This is the maximum amount of bars that a Pivot would be considered for a breakout"

prd =       input.int   (defval=4,   title='Pivot Lookback Period',     minval=2, group="S/R Breakout Indicator")
bo_len =    input.int   (defval=300, title='Max Breakout Length',       minval=30, maxval=300, tooltip=tip_max_boLen, group="S/R Breakout Indicator")
cwidthu =   input.float (defval=2.,  title='Threshold Rate %',          minval=1., maxval=10, group="S/R Breakout Indicator") / 100
mintest =   input.int   (defval=1,   title='Minimum Number of Tests',   minval=1, tooltip=tip_mintest, group="S/R Breakout Indicator")
bocolorup = color.aqua
bocolordown = color.fuchsia
lstyle = line.style_dotted
lwidth = 2

//width
lll = math.max(math.min(bar_index, 300), 1)
float h_ = ta.highest(lll)
float l_ = ta.lowest(lll)
float chwidth = (h_ - l_) * cwidthu


// check if PH/PL {
ph = ta.pivothigh(prd, prd)
pl = ta.pivotlow(prd, prd)

//keep Pivot Points and their locations in the arrays
var phval = array.new_float(0)
var phloc = array.new_int(0)
var plval = array.new_float(0)
var plloc = array.new_int(0)

// keep PH/PL levels and locations
if ph
    array.unshift(phval, ph)
    array.unshift(phloc, bar_index - prd)
    if array.size(phval) > 1  // cleanup old ones
        for x = array.size(phloc) - 1 to 1 by 1
            if bar_index - array.get(phloc, x) > bo_len
                array.pop(phloc)
                array.pop(phval)

if pl
    array.unshift(plval, pl)
    array.unshift(plloc, bar_index - prd)
    if array.size(plval) > 1  // cleanup old ones
        for x = array.size(plloc) - 1 to 1 by 1
            if bar_index - array.get(plloc, x) > bo_len
                array.pop(plloc)
                array.pop(plval)
// }

latest_bull_break = box(na)

start_index = 0

// check Bullish Breakout {
float bomax = na
int bostart = bar_index
num = 0
hgst = ta.highest(prd)[1]
if array.size(phval) >= mintest and close > open and close > hgst
    bomax := array.get(phval, 0)
    xx = 0
    for x = 0 to array.size(phval) - 1 by 1
        if array.get(phval, x) >= close
            break
        xx := x
        bomax := math.max(bomax, array.get(phval, x))
        bomax
    if xx >= mintest and open <= bomax
        for x = 0 to xx by 1
            if array.get(phval, x) <= bomax and array.get(phval, x) >= bomax - chwidth
                num += 1
                bostart := array.get(phloc, x)
                bostart
        if num < mintest or hgst >= bomax
            bomax := na
            bomax

bull_breakout = not na(bomax) and num >= mintest

if bull_breakout
    // box.new(bostart, bomax, bar_index, bomax -chwidth, bocolorup, lwidth, lstyle, xloc=xloc.bar_index, bgcolor=color.new(bocolorup, 80))
    
    l1 = line.new(x1 = bar_index, y1 = bomax, x2 = bostart, y2 = bomax, color = bocolorup, style = lstyle)
    l2 = line.new(x1 = bar_index, y1 = bomax - chwidth, x2 = bostart, y2 = bomax - chwidth, color = bocolorup, style = lstyle)
    line.new(x1 = bostart, y1 = bomax - chwidth, x2 = bostart, y2 = bomax, color = bocolorup, style = lstyle)
    line.new(x1 = bar_index, y1 = bomax - chwidth, x2 = bar_index, y2 = bomax, color = bocolorup, style = lstyle)
   
    linefill.new(l1, l2, color.new(bocolorup, 80))
    
    start_index := bostart

// }

// check Bearish Breakout {
float bomin = na
bostart := bar_index
num1 = 0
lwst = ta.lowest(prd)[1]
if array.size(plval) >= mintest and close < open and close < lwst
    bomin := array.get(plval, 0)
    xx = 0
    for x = 0 to array.size(plval) - 1 by 1
        if array.get(plval, x) <= close
            break
        xx := x
        bomin := math.min(bomin, array.get(plval, x))
        bomin
    if xx >= mintest and open >= bomin
        for x = 0 to xx by 1
            if array.get(plval, x) >= bomin and array.get(plval, x) <= bomin + chwidth
                num1 += 1
                bostart := array.get(plloc, x)
                bostart
        if num1 < mintest or lwst <= bomin
            bomin := na
            bomin

bear_breakout =not na(bomin) and num1 >= mintest

if bear_breakout
    box.new(bostart, bomin + chwidth, bar_index, bomin, bocolordown, lwidth, lstyle, xloc=xloc.bar_index, bgcolor=color.new(bocolordown, 80))
    
    
    l1 = line.new(x1 = bar_index, y1 = bomin, x2 = bostart, y2 = bomin, color = bocolordown, style = lstyle)
    l2 = line.new(x1 = bar_index, y1 = bomin + chwidth, x2 = bostart, y2 = bomin + chwidth, color = bocolordown, style = lstyle)
    line.new(x1 = bostart, y1 = bomin + chwidth, x2 = bostart, y2 = bomin, color = bocolordown, style = lstyle)
    line.new(x1 = bar_index, y1 = bomin + chwidth, x2 = bar_index, y2 = bomin, color = bocolordown, style = lstyle)
    
    linefill.new(l1, l2, color.new(bocolordown, 80))
    
    start_index := bostart
    
// }

// ]

// FUNCTIONS: ENTRY LINES DETECTION
// [
// Supply/Demand => Supply and Demand Zones, for bullish and bearish breakouts respectively
// CB Orderblock => Bearish and Bullish Orderblocks, for bullish and bearish breakouts respectively

highest_supply(_start_inx) =>
    // [
    top = float(0)
    top_low = float(0)
    
    update_low = false
    
    if _start_inx != 0
        // SUPPLY/DEMAND ZONE: Detect Highest Supply Zones from Lookback period, using bar_index {
        if meth_sig_line == "Supply/Demand Zone"
            start_distance = ( bar_index - _start_inx ) - 2 // Minimum Number of candles in Supply/Demand zone = 2
            
            for i = start_distance to 1
                    
                // Check the candles for HH or LL
                if not cond_supply[i]
                    update_low := false
                    continue
                else 
                    current_top = close[i] > open[i] ? high[i + 3] : high[i + 2] // Accounts for 2 or 3 candles in the zone
                    
                    if current_top > top
                        top := current_top
                        top_low := low[i]
                        update_low := true
                    
                    if update_low
                        top_low := low[i]
        // }
        
        // CB OB: Detect Highest Bearish Signal Line value from Lookback period, using bar_index  {
        else if meth_sig_line == "CB Orderblock"
            start_distance = ( bar_index - _start_inx ) - minCand // Minimum Number of candles in CB OB  = minCand
            
            for i = start_distance to 1
                    
                // Check the Bearish Orderblocks formed
                if not new_bear[i]
                    update_low := false
                    continue
                else 
                    current_top = sig_line_bear
                    
                    if current_top > top
                        top := current_top
                        top_low := low[i]
                        update_low := true
                    
                    if update_low
                        top_low := low[i]
        // }
    
    if top == float(0)
        [na, na]
    else 
        [top, top_low]
    
    // ]

lowest_demand(_start_inx) =>
    // [
    bottom = float(0)
    bottom_high = float(0)
    
    update_high = false
    
    if _start_inx != 0
        // SUPPLY/DEMAND ZONE: Detect Lowest Demand Zones from Lookback period, using bar_index {
        if meth_sig_line == "Supply/Demand Zone"
            start_distance = ( bar_index - _start_inx ) - 2 // Minimum Number of candles in Supply/Demand zone = 2
                
            for i = start_distance to 1
                
                // Check the candles for HH or LL
                if not cond_demand[i]
                    update_high := false
                    continue
                else 
                    current_bottom = close[i] < open[i] ? low[i + 3] : low[i + 2] // Accounts for 2 or 3 candles in the zone
                    
                    if bottom == 0
                        bottom := current_bottom
                        bottom_high := high[i]
                        update_high := true
                    
                    else if current_bottom < bottom
                        bottom := current_bottom
                        bottom_high := high[i]
                        update_high := true
                    
                    if update_high
                        bottom_high := high[i]
                        
        // }
        
        // CB OB: Detect Lowest Bullish Signal Line value from Lookback period, using bar_index {
        else if meth_sig_line == "CB Orderblock"
            start_distance = ( bar_index - _start_inx ) - minCand // Minimum Number of candles in CB OB  = minCand
            
            for i = start_distance to 1
                
                // Check the candles for HH or LL
                if not new_bull[i]
                    update_high := false
                    continue
                else 
                    current_bottom = sig_line_bull
                    
                    if bottom == 0
                        bottom := current_bottom
                        bottom_high := high[i]
                        update_high := true
                    
                    else if current_bottom < bottom
                        bottom := current_bottom
                        bottom_high := high[i]
                        update_high := true
                    
                    if update_high
                        bottom_high := high[i]
        // }

    if bottom == float(0)
        [na, na]
    else 
        [bottom, bottom_high]
    // ]
// ]

// STRATEGY EXECUTION
// [
[price_long_entry, price_long_sl] = highest_supply(start_index)
[price_short_entry, price_short_sl] = lowest_demand(start_index)

var long_entry_price = 0.0, var long_stop_loss = 0.0
var short_entry_price = 0.0, var short_stop_loss = 0.0
var pend_buy = false, var pend_sell = false

var time_pend_long = time(na), var time_pend_short = time(na)

cond_long = false, cond_short = false

// REVISIT : Only find trades when there are no active trades 

// Scan for Valid Breakouts and Entry Signals {
if bull_breakout and not na(price_long_entry) // and not (pend_buy or pend_sell)
    long_entry_price := price_long_entry
    long_stop_loss := price_long_sl
    pend_buy := true
    pend_sell := false
    time_pend_long := time

else if bear_breakout and not na(price_short_entry) // and not (pend_buy or pend_sell)
    short_entry_price := price_short_entry
    short_stop_loss := price_short_sl
    pend_sell := true
    pend_buy := false
    time_pend_short := time
// }


// Scan for touch of the entry line {
if pend_buy and low <= long_entry_price and time_pend_long != time
    // Enter Buy Trade
    cond_long := true
    
    // Reset Variables
    pend_buy := false
    
else if pend_sell and high >= short_entry_price and time_pend_short != time
    // Enter Sell Trade
    cond_short := true 
    
    // Reset Variables
    pend_sell := false
// }
// ]

// PLOTS
// [

// bgcolor(cond_long ? color.lime : cond_short ? #FF0000 : na)  

// Plot Entry Lines
plot((not hide_all_plots) ? long_entry_price : na, "Entry Line : Long", color=color.new(#00FF00, 50), style=plot.style_stepline_diamond, editable=false)
plot((not hide_all_plots) ? short_entry_price : na, "Entry Line : Short", color=color.new(#FF0000, 50), style=plot.style_stepline_diamond, editable=false)

// Plot Breakouts
plotshape((not hide_all_plots) and bull_breakout, location = location.belowbar, style  = shape.triangleup, color = bocolorup, size = size.tiny)
plotshape((not hide_all_plots) and bear_breakout, location = location.abovebar, style  = shape.triangledown, color = bocolordown, size = size.tiny)


// Supply and Demand Bar Colors
barcolor((not hide_all_plots) and show_sd_zones and cond_demand? #FFFFFF :na, editable=false)
barcolor((not hide_all_plots) and show_sd_zones and cond_demand? #FFFFFF :na, -1, editable=false)
barcolor((not hide_all_plots) and show_sd_zones and (cond_demand and close>open)? #FFFFFF :na, -2, editable=false)

barcolor((not hide_all_plots) and show_sd_zones and cond_supply? #000000 :na, editable=false)
barcolor((not hide_all_plots) and show_sd_zones and cond_supply? #000000 :na, -1, editable=false)
barcolor((not hide_all_plots) and show_sd_zones and (cond_supply and close<open)? #000000 :na, -2, editable=false)
// ]


