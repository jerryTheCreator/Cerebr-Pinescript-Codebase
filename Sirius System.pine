// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© Jerry

//@version=4
study("Sirius Wavetrend", overlay=1)

//*************** SIRIUS SYSTEM ***************//

//GENERAL SETTINGS
useGenObOs = input(true, "Use General Overbought/Oversold?", group="General Settings")
genOb = input(70, "General Overbought Level", group="General Settings")
genOs = input(30, "General Oversold Level", group="General Settings")


firstInd = input("MACD", "First Indicator", options=["MACD", "Wave Trend"])
scndInd = input("RSI", "Sirius Second Indicator", options = ["RSI", "Stochastic", "Any", "Both"], group="General Settings")
incAltMacd = input(false, "Include Alternative MACD Rule?")

//***** INDICATORS *****//

// HTF MACD
// {

// INPUTS
//{
macdRes     = input("120", "HTF MACD TimeFrame", input.resolution, group="HTF MACD")
macdSrc = input(close, "MACD Source", input.source, group="HTF MACD")
macdflen = input(12, "MACD Fast Length", group="HTF MACD")
macdslen = input(26, "MACD Slow Length", group="HTF MACD")
siglen = input(9, "MACD Signal Line", group="HTF MACD")
macdMeth = input("Calculate", "MACD Calculation Method", options=["Calculate", "HTF Import"])
//}

// FUNCTIONS
//{
htf_macd() =>
    htfFastMa = sma(macdSrc, macdflen)
    htfSlowMa = sma(macdSrc, macdslen)
    htfMacd    = htfFastMa - htfSlowMa
    htfSignal  = sma(htfMacd, siglen)
    htfHist    = htfMacd - htfSignal
    clr = (htfHist>=0 ? (htfHist[1] < htfHist ? #26A69A : #B2DFDB) : (htfHist[1] < htfHist ? #FFCDD2 : #EF5350) )
    
    [htfMacd, htfSignal, htfHist, clr]
//}

// CALCULATIONS
//{

[calcMacd, calcSignal, calcHist, calcHistcolor] = security(syminfo.tickerid, macdRes, htf_macd(), barmerge.gaps_off, barmerge.lookahead_off)
[impMacd, impSignal, impHist] = security(syminfo.tickerid, macdRes, macd(macdSrc, macdflen, macdslen, siglen), barmerge.gaps_off, barmerge.lookahead_off)
impHistColor = impHist >= 0 ? ( impHist[1] < impHist ? #26A69A : #B2DFDB ) : ( impHist[1] < impHist ? #FFCDD2 : #EF5350 ) 


htfMacd = macdMeth == "Calculate" ? calcMacd : impMacd
htfSignal = macdMeth == "Calculate" ? calcSignal : impSignal
htfHist = macdMeth == "Calculate" ? calcHist : impHist
mcolor = macdMeth == "Calculate" ? calcHistcolor : impHistColor


//}

// SIGNALS 
//{
htfMacdLong = mcolor == #FFCDD2 and htfMacd < 0
htfMacdShort = mcolor == #B2DFDB and htfMacd > 0 

altHtfMacdLong = mcolor == #26A69A and htfMacd < 0
altHtfMacdShort = mcolor == #EF5350 and htfMacd > 0
//}

//}
// SIGNAL ==> htfMacdLong, htfMacdShort, altHtfMacdLong, altHtfMacdShort

//WAVE TREND
// {

wtRes = input("120", "Wave Trend Timeframe", input.resolution, group="WAVE TREND")
wtChannelLen = input(10, "Channel Length", inline="wt1", group="WAVE TREND")
wtAvgLen = input(21, "Average Length", inline="wt1", group="WAVE TREND")
wtOb = input(50, "WT Overbought", group="WAVE TREND", inline="wtObOs")
wtOs = input(-50, "WT Oversold", group="WAVE TREND", inline="wtObOs")
wtUseObOs = input(true, "Use Wave Trend Overbought/Oversold Levels", group="WAVE TREND")
 
wtSrc = security(syminfo.tickerid, wtRes, hlc3, barmerge.gaps_off, barmerge.lookahead_off) 
wtEsa = security(syminfo.tickerid, wtRes, ema(wtSrc, wtChannelLen), barmerge.gaps_off, barmerge.lookahead_off)
d = security(syminfo.tickerid, wtRes, ema(abs(wtSrc - wtEsa), wtChannelLen), barmerge.gaps_off, barmerge.lookahead_off)
ci = (wtSrc - wtEsa) / (0.015 * d)
tci = ema(ci, wtAvgLen)
 
wtLine = tci
wtSignal = sma(wtLine,4)
wtHist = wtLine - wtSignal

wtHistColor = wtHist >= 0 ? ( wtHist[1] < wtHist ? #26A69A : #B2DFDB ) : ( wtHist[1] < wtHist ? #FFCDD2 : #EF5350 ) 

isWtOb = wtUseObOs ? wtLine >= wtOb : wtLine > 0
isWtOs = wtUseObOs ? wtLine <= wtOs : wtLine < 0

wtLong = wtHistColor == #FFCDD2 and isWtOs
wtShort = wtHistColor == #B2DFDB and isWtOb


//}
//SIGNALS ==> wtLong, wtShort

//Alternative signal for Wave trend is if HTF Wavetrend has a bullish configuration (wtLine > wtSignal) or bearish

//HTF RSI
// {

//INPUTS 
// {
rsiRes = input("60", "RSI Timeframe", input.resolution, group="RSI")
rsiSrc = input(close, "RSI Source", input.source, group="RSI")
rsiLen = input(14, "RSI Length", group="RSI")
rsiOb  = input(60, "Overbought", group="RSI", inline ="rsiObOs")
rsiOs  = input(40, "Oversold", group="RSI", inline ="rsiObOs")
// }

//CALCULATION
// {
rsi = security(syminfo.tickerid, rsiRes, rsi(rsiSrc, rsiLen), barmerge.gaps_off, barmerge.lookahead_off)

isRsiOb = useGenObOs ? rsi >= genOb : rsi >= rsiOb
isRsiOs = useGenObOs ? rsi <= genOs : rsi <= rsiOs
// }

//}
// SIGNAL ==> isRsiOb, isRsiOs

// HTF STOCHASTIC
// {

stRes = input("60", "Stochastic Timeframe", input.resolution, group="STOCHASTIC")
stLen = input(10, title="%K Length", minval=1, group="STOCHASTIC")
stSmooth = input(3, title="%K Smoothing", minval=1, group="STOCHASTIC")
stSigLen = input(3, title="%D Smoothing", minval=1, group="STOCHASTIC")
stOb = input(70,  "Overbought", group="STOCHASTIC", inline="stObOs")
stOs = input(30,  "Oversold", group="STOCHASTIC", inline="stObOs")

stoch = security(syminfo.tickerid, stRes, sma(stoch(close, high, low, stLen), stSmooth), barmerge.gaps_off, barmerge.lookahead_off) 
stSignal = sma(stoch, stSigLen)

isStOb = useGenObOs ? stoch >= genOb : stoch >= stOb
isStOs = useGenObOs ? stoch <= genOs : stoch <= stOs

//}
//SIGNAL ==> isStOb, isStOs


//***** SIRIUS SIGNALS *****//
// {

srMacdLong = incAltMacd ? htfMacdLong or altHtfMacdLong : htfMacdLong
srMacdShort = incAltMacd ? htfMacdShort or altHtfMacdShort : htfMacdShort

sr1stIndLong = firstInd == "MACD" ? srMacdLong : firstInd == "Wave Trend" ? wtLong : na
sr1stIndShort = firstInd == "MACD" ? srMacdShort : firstInd == "Wave Trend" ? wtShort : na

sr2ndIndLong  = 
  scndInd == "Both" ? isRsiOs and isStOs :
  scndInd == "Any" ? isRsiOs or isStOs :
  scndInd == "RSI" ? isRsiOs :
  scndInd == "Stochastic" ? isStOs :
  na


sr2ndIndShort  = 
  scndInd == "Both" ? isRsiOb and isStOb :
  scndInd == "Any" ? isRsiOb or isStOb :
  scndInd == "RSI" ? isRsiOb :
  scndInd == "Stochastic" ? isStOb :
  na
  
  
srLong = sr1stIndLong and sr2ndIndLong
srShort = sr1stIndShort and sr2ndIndShort
//}
//SIGNALS ==> srLong, srShort

plotshape(srLong, "Long", shape.triangleup, location.belowbar, color.lime, size = size.small)
plotshape(srShort, "Short", shape.triangledown, location.abovebar, color.maroon, size = size.small)

plot(na)
