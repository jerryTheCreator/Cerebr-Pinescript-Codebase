// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © Jerry

//@version=4
study("Cerebr Sirius", overlay=true)

//PIP CALCULATOR
//{
pipMult = input(1, "**Point-Pip Converter**", step = 1, group = "General Settings")

pip() => syminfo.mintick * (pow(10, pipMult))
DistanceToPip(_price1, _price2) => abs(_price1 - _price2) / pip()
//}

//*************** MOVING AVERAGE ***************//
//{

// INPUTS
//{
maSrc = input(close, "Moving Average Source", group="Moving Averages Settings")
maUseHTF = input(false, "Use HTF MA", group="Moving Averages Settings")

emafRes = input("15", "HTF Fast MA Timeframe", input.resolution, group="Moving Averages Settings")
emasRes = input("240", "HTF Slow MA Timeframe", input.resolution, group="Moving Averages Settings")

emaflen = input(50, "Fast EMA", input.integer, group="Moving Averages Settings")
emaslen = input(200, "Slow EMA", input.integer, group="Moving Averages Settings")

htfemaflen = input(20, "HTF Fast EMA", input.integer, group="Moving Averages Settings")
htfemaslen = input(50, "HTF Slow EMA", input.integer, group="Moving Averages Settings")

pbRadius = input(5, "Pullback Zone Radius", group="Moving Averages Settings") * pip()
//}

// CALCULATION
//{
hftEmaF = security(syminfo.tickerid, emafRes, ema(maSrc, htfemaflen), barmerge.gaps_off, barmerge.lookahead_off)
hftEmaS = security(syminfo.tickerid, emasRes, ema(maSrc, htfemaslen), barmerge.gaps_off, barmerge.lookahead_off)

fastEma = maUseHTF ? hftEmaF : ema(maSrc, emaflen)
slowEma = maUseHTF ? hftEmaS : ema(maSrc, emaslen)

pbZn_top = fastEma + pbRadius
pbZn_bott = fastEma - pbRadius
//}

//SIGNALS
//{
isPback = (high <= pbZn_top and high >= pbZn_bott ) or ( low <= pbZn_top and low >= pbZn_bott) or (high >= pbZn_top and low <= pbZn_bott)

maLong = fastEma > slowEma and isPback
maShort = fastEma < slowEma and isPback
//}

//}
//SIGNALS ==> maLong, maShort

//*************** VUMANCHU ***************//
//{

// INPUTS 
//{

vmcUseHTF = input(false, "Use Higher Timeframe", group="VUMANCHU SETTINGS")
vmcRes = input("240", "Higher Timeframe", input.resolution, group="VUMANCHU SETTINGS")
useVMCObOS = input(false, "Use VMC Ob/Os? ", group="VUMANCHU SETTINGS")

// WaveTrend
wtChannelLen = input(9, title = 'WT Channel Length', type = input.integer, group="VUMANCHU SETTINGS")
wtAverageLen = input(12, title = 'WT Average Length', type = input.integer, group="VUMANCHU SETTINGS")
wtMASource = input(hlc3, title = 'WT MA Source', type = input.source, group="VUMANCHU SETTINGS")
wtMALen = input(3, title = 'WT MA Length', type = input.integer, group="VUMANCHU SETTINGS")

// WaveTrend Overbought & Oversold lines
obLevel = 53 //input(53, title = 'WT Overbought Level 1', type = input.integer, group="VUMANCHU SETTINGS")
obLevel2 = 60 //input(60, title = 'WT Overbought Level 2', type = input.integer, group="VUMANCHU SETTINGS")
obLevel3 = 100 //input(100, title = 'WT Overbought Level 3', type = input.integer, group="VUMANCHU SETTINGS")
osLevel = -53 //input(-53, title = 'WT Oversold Level 1', type = input.integer, group="VUMANCHU SETTINGS")
osLevel2 = -60 //input(-60, title = 'WT Oversold Level 2', type = input.integer, group="VUMANCHU SETTINGS")
osLevel3 = -75 //input(-75, title = 'WT Oversold Level 3', type = input.integer, group="VUMANCHU SETTINGS")


// RSI+MFI
rsiMFIperiod = input(60,title = 'MFI Period', type = input.integer, group="VUMANCHU SETTINGS")
rsiMFIMultiplier = input(150, title = 'MFI Area multiplier', type = input.float, group="VUMANCHU SETTINGS")
rsiMFIPosY = input(2.5, title = 'MFI Area Y Pos', type = input.float, group="VUMANCHU SETTINGS")

//}

// FUNCTIONS 
//{

 // RSI+MFI
f_rsimfi(_period, _multiplier, _tf) => security(syminfo.tickerid, _tf, sma(((close - open) / (high - low)) * _multiplier, _period) - rsiMFIPosY)  

 // WAVETREND
f_wavetrend(src, chlen, avg, malen, tf) =>
    tfsrc = security(syminfo.tickerid, tf, src)
    esa = ema(tfsrc, chlen)
    de = ema(abs(tfsrc - esa), chlen)
    ci = (tfsrc - esa) / (0.015 * de)
    wt1 = security(syminfo.tickerid, tf, ema(ci, avg))
    wt2 = security(syminfo.tickerid, tf, sma(wt1, malen))
    wtOversold = wt2 <= osLevel
    wtOverbought = wt2 >= obLevel
    wtCross = cross(wt1, wt2)
    wtCrossUp = wt2 - wt1 <= 0
    wtCrossDown = wt2 - wt1 >= 0
    wtCrosslast = cross(wt1[2], wt2[2])
    wtCrossUplast = wt2[2] - wt1[2] <= 0
    wtCrossDownlast = wt2[2] - wt1[2] >= 0
    [wt1, wt2, wtOversold, wtOverbought, wtCross, wtCrossUp, wtCrossDown, wtCrosslast, wtCrossUplast, wtCrossDownlast]
    
//}

// CALCULATION 
//{

// RSI + MFI Area
rsiMFI = f_rsimfi(rsiMFIperiod, rsiMFIMultiplier, vmcUseHTF ? vmcRes : timeframe.period)

// Calculates WaveTrend
[wt1, wt2, wtOversold, wtOverbought, wtCross, wtCrossUp, wtCrossDown, wtCross_last, wtCrossUp_last, wtCrossDown_last] = 
  f_wavetrend(wtMASource, wtChannelLen, wtAverageLen, wtMALen, vmcUseHTF ? vmcRes : timeframe.period)

//Vumanchu Signals
//Vumanchu Signals
vmcMF = rsiMFI < 0 ? "Short" : "Long"								 
vmcLong = useVMCObOS ? wtCross and wtCrossUp and wtOversold and wt1 < 0 and wt2 < 0 : wtCross and wtCrossUp and wt1 < 0 and wt2 < 0 
vmcShort = useVMCObOS ? wtCross and wtCrossDown and wtOverbought and wt1 > 0 and wt2 > 0 : wtCross and wtCrossDown and wt1 > 0 and wt2 > 0
 
// }

//}
//SIGNALS ==> vmcMF ("Long" or "Short")
//TRIGGERS ==> vmcLong vmcShort

//*************** ENTRY RULES ***************//
//{

goLong = maLong and vmcMF == "Long" and vmcLong
goShort = maShort and vmcMF == "Short" and vmcShort

//}

//*************** PLOTS ***************//
//{
plot(fastEma)
plot(slowEma, color = color.yellow)
plot(pbZn_top, color = color.new(color.purple, 20))
plot(pbZn_bott, color = color.new(color.purple, 20))

plotshape(goLong, "Long", shape.triangleup, location.belowbar, color.lime, size = size.small)
plotshape(goShort, "Short", shape.triangledown, location.abovebar, color.maroon, size = size.small)

//}



