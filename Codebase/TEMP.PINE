
// Â© informanerd
//@version=4

maxBoxes = 500
study("HTF Candles", overlay = true, max_boxes_count = maxBoxes)

htf = input("", "Higher Time Frame", input.resolution)
thickWick = input(false, "Thick Candle Wicks", group = "Candles Appearance")
ascColor = input(color.green, "Bullish Color", group = "Candles Appearance")
descColor = input(color.red, "Bearish Color", group = "Candles Appearance")
bodyTrans = input(60, "Body Color Transparency", minval = 0, maxval = 100, step = 10, group = "Candles Appearance")
wickTrans = input(80, "Wicks Color Transparency", minval = 0, maxval = 100, step = 10, group = "Candles Appearance")

ctfCandleDeltaTime() =>
    if timeframe.isseconds
        timeframe.multiplier * 1000
    else if timeframe.isminutes
        timeframe.multiplier * 1000 * 60
    else if timeframe.isdaily
        timeframe.multiplier * 1000 * 60 * 1440
    else if timeframe.isweekly
        timeframe.multiplier * 1000 * 60 * 1440 * 7
    else if timeframe.ismonthly
        timeframe.multiplier * 1000 * 60 * 1440 * 30
    else
        0

var bodies = array.new_box()
var wicks = array.new_box()
var color bodyColor = na
var color wickColor = na

htfO = security(syminfo.tickerid, htf, open)
htfH = security(syminfo.tickerid, htf, high)
htfL = security(syminfo.tickerid, htf, low)
htfC = security(syminfo.tickerid, htf, close)
htfOpenTime = security(syminfo.tickerid, htf, time)
htfCloseTime = security(syminfo.tickerid, htf, time_close)

if array.size(bodies) > 0 and htfOpenTime == htfOpenTime[1]
    box.delete(array.pop(bodies))
    box.delete(array.pop(wicks))
if array.size(bodies) == maxBoxes / 2
    box.delete(array.shift(bodies))
    box.delete(array.shift(wicks))

bodyTop = max(htfO, htfC)
bodyBottom = min(htfO, htfC)
wickLeft = htfOpenTime + ((htfCloseTime - htfOpenTime) / 2) - ctfCandleDeltaTime()
wickRight = htfCloseTime - ((htfCloseTime - htfOpenTime) / 2) + (ctfCandleDeltaTime() / 2)
bodyColor := htfO > htfC ? color.new(descColor, bodyTrans) : htfO < htfC ? color.new(ascColor, bodyTrans) : bodyColor
wickColor := htfO > htfC ? color.new(descColor, wickTrans) : htfO < htfC ? color.new(ascColor, wickTrans) : wickColor

array.push(bodies, box.new(htfOpenTime, bodyTop, htfCloseTime, bodyBottom, bodyTop == bodyBottom ? bodyColor : na, xloc = xloc.bar_time, bgcolor = bodyColor))
array.push(wicks, box.new(thickWick ? htfOpenTime : wickLeft, htfH, thickWick ? htfCloseTime : wickRight, htfL, na, xloc = xloc.bar_time, bgcolor = wickColor))


