//@version=4

maxBoxes = 500, maxFvg = 500
study("CEREBRUM ORDER BLOCK AND FVG", shorttitle="CB Orderblock / FVG", overlay=true, max_boxes_count = maxBoxes, precision=5)

// FUNCTIONS
// {

barInZone(_top, _bott, _index) => _index == 0 ? (high <= _top and high >= _bott ) or 
  ( low <= _top and low >= _bott) or (high >= _top and low <= _bott) : 
  (high[_index] <= _top and high[_index] >= _bott ) or 
  ( low[_index] <= _top and low[_index] >= _bott) or (high[_index] >= _top and low[_index] <= _bott)

znInZone(_top, _bott, _top2, _bott2) => 
    tp1 = max(_top, _bott),  bt1 = min(_top, _bott)
    tp2 = max(_top2, _bott2),  bt2 = min(_top2, _bott2)

    (tp2 <= tp1 and tp2 >= bt1 ) or ( bt2 <= tp1 and bt2 >= bt1) or (tp2 >= tp1 and bt2 <= bt1)
    
tf(_res, _exp, gaps_on)  => gaps_on == 0 ? security(syminfo.tickerid, _res, _exp) :
  gaps_on == true ? security(syminfo.tickerid, _res, _exp, barmerge.gaps_on, barmerge.lookahead_off ) : 
  security(syminfo.tickerid, _res, _exp, barmerge.gaps_off, barmerge.lookahead_off )
  
boxinbox(op1, cl1, op2, cl2) => (op2 > op1 and op2 < cl1) or (op1 > op2 and op1 < cl2)

nullbox = box.new(na, na, na , na, color(na), xloc = xloc.bar_time, bgcolor = color(na))

//Period Converter Function
//{
resToInt(_res) =>
    resInt = 0
    if _res == "D"
        resInt := 1440
    else if _res == "W"
        resInt := 10080
    else if _res == "M"
        resInt := 43200
    else
        resInt := round(tonumber(_res))
    
    resInt

periodConv(_len, _res) =>
    xtf = round(tonumber(timeframe.period))
    htfi = resToInt(_res)
    
    len = xtf < htfi ? ((htfi * _len) / xtf) : na
    
    len
//}

// }


// >>>>>>>>>>>>>>> IMBALANCE <<<<<<<<<<<<<<<//
// {

// PARAMETERS
// {

htf = input("", "Higher Time Frame", input.resolution, group="IMBALANCE: SETTINGS")

plotFvgTop = input(1, "FVG Blocks Above?", input.integer, minval=1, maxval=3, group="IMBALANCE: SETTINGS")
plotFvgBott = input(1, "FVG Blocks Below?", input.integer, minval=1, maxval=3, group="IMBALANCE: SETTINGS")
filtFvginFvg = false

// cl = time_close(htf)
ascColor = color(na), descColor = color(na)
bodyTrans = 100, wickTrans = 100

// }

// CANDLES AND FVG SCANNING
// {
    
// HTF CANDLES CALCULATION AND PLOTTING
// {
ctfCandleDeltaTime() =>
    if timeframe.isseconds
        timeframe.multiplier * 1000
    else if timeframe.isminutes
        timeframe.multiplier * 1000 * 60
    else if timeframe.isdaily
        timeframe.multiplier * 1000 * 60 * 1440
    else if timeframe.isweekly
        timeframe.multiplier * 1000 * 60 * 1440 * 7
    else if timeframe.ismonthly
        timeframe.multiplier * 1000 * 60 * 1440 * 30
    else
        0

var bodies = array.new_box()
var wicks = array.new_box()
var color bodyColor = color(na)
var color wickColor = color(na)

htfO = security(syminfo.tickerid, htf, open)
htfH = security(syminfo.tickerid, htf, high)
htfL = security(syminfo.tickerid, htf, low)
htfC = security(syminfo.tickerid, htf, close)
htfOpenTime = security(syminfo.tickerid, htf, time)
htfCloseTime = security(syminfo.tickerid, htf, time_close)

if array.size(bodies) > 0 and htfOpenTime == htfOpenTime[1]
    box.delete(array.pop(bodies))
    box.delete(array.pop(wicks))
if array.size(bodies) == maxBoxes / 2
    box.delete(array.shift(bodies))
    box.delete(array.shift(wicks))

bodyTop = max(htfO, htfC)
bodyBottom = min(htfO, htfC)
wickLeft = htfOpenTime + ((htfCloseTime - htfOpenTime) / 2) - ctfCandleDeltaTime()
wickRight = htfCloseTime - ((htfCloseTime - htfOpenTime) / 2) + (ctfCandleDeltaTime() / 2)
bodyColor := htfO > htfC ? color.new(descColor, bodyTrans) : htfO < htfC ? color.new(ascColor, bodyTrans) : bodyColor
wickColor := htfO > htfC ? color.new(descColor, wickTrans) : htfO < htfC ? color.new(ascColor, wickTrans) : wickColor

wickChange = barssince(change(wickLeft))
var periodChecker = array.new_float(3, 0.05)
if change(wickLeft)
    array.shift(periodChecker)
    array.push(periodChecker, wickChange[1] + 1)
    
period = array.max(periodChecker)

array.push(bodies, box.new(htfOpenTime, bodyTop, htfCloseTime, bodyBottom, bodyTop == bodyBottom ? 
  bodyColor : color(na), xloc = xloc.bar_time, bgcolor = bodyColor))
array.push(wicks, box.new(htfOpenTime, htfH, htfCloseTime , htfL, color(na), xloc = xloc.bar_time, bgcolor = wickColor))
// }

// SCAN FOR FVG FROM BOX ARRAY
// {
w_datasize = array.size(wicks)

var upfvgBox = array.new_box()
var dnfvgBox = array.new_box()

upboxReplaced = false, dnboxReplaced = false

newFvgAbove = false, newFvgBelow = false

// FUNCTION TO CALCULATE IMBALANCES
// {

boxInx = w_datasize - 1
box1 = box(na), box2 = box(na), box3 = box(na)

if boxInx - 3 >= 0
    box1 := array.get(wicks, boxInx - 1)
    box3 := array.get(wicks, boxInx - 3)

hi1 = box.get_top(box1) , lo1 = box.get_bottom(box1)
hi3 = box.get_top(box3) , lo3 = box.get_bottom(box3)
op3 = box.get_left(box3), cl1 = box.get_right(box1)

fvg = "none"
if lo3 > hi1
    fvg := "above"
else if hi3 < lo1
    fvg := "below"
    
new_fvg = box(na)

if fvg == "above"
    // PLOT THE FVG BLOCK
    new_fvg := box.new(op3, hi1, cl1 , lo3, color(na), xloc = xloc.bar_time, bgcolor = color(na))
    newFvgAbove := true
    
    if array.size(upfvgBox) < maxBoxes / 2
        array.push(upfvgBox, new_fvg)
        
    else if array.size(upfvgBox) == maxBoxes / 2
        box.delete(array.shift(upfvgBox))
        upboxReplaced := true
        array.push(upfvgBox, new_fvg)

else if fvg == "below"
    // PLOT THE FVG BLOCK
    new_fvg := box.new(op3, lo1, cl1 , hi3, color(na), xloc = xloc.bar_time, bgcolor =  color(na))
    newFvgBelow := true
    
    if array.size(dnfvgBox) < maxBoxes / 2
        array.push(dnfvgBox, new_fvg)
        
    else if array.size(dnfvgBox) == maxBoxes / 2
        box.delete(array.shift(dnfvgBox))
        dnboxReplaced := true
        array.push(dnfvgBox, new_fvg)
// }

// }

// }

// PLOT IMBALANCES
// {

upfvg_datasize = array.size(upfvgBox)
dnfvg_datasize = array.size(dnfvgBox)

// GET BOX DATA
// {
getCoord(boxarr, datasize, inx) =>
    gcHi = box.get_top(array.get(boxarr, datasize - inx))
    gcLo = box.get_bottom(array.get(boxarr, datasize - inx))
    gcOp = box.get_left(array.get(boxarr, datasize - inx))
    gcCl = box.get_right(array.get(boxarr, datasize - inx))

    [gcHi, gcLo, gcOp, gcCl]
// }

// FVG ABOVE
// {
var uline_mid = line(na), var uline_mid2 = line(na), var uline_mid3 = line(na), var u_delLine = line(na), var u_plotted = 0
var uline_hi = line(na), var uline_hi2 = line(na), var uline_hi3 = line(na), var u_delHiLine = line(na)
var uline_lo = line(na), var uline_lo2 = line(na), var uline_lo3 = line(na), var u_delLoLine = line(na)

upDataChange = change(upfvg_datasize)
new_upFvg = not upboxReplaced ? upDataChange : upboxReplaced

up_openT = upfvg_datasize > 1 ? box.get_left(array.get(upfvgBox, upfvg_datasize - 1)) : 0.0
c_up_op = change(up_openT) 


// CONDITION
// {
if upfvg_datasize > 1 and new_upFvg
    if c_up_op
        
        [upHi, upLo, op, cl] = getCoord(upfvgBox, upfvg_datasize, 1)
        [pre_upHi, pre_upLo, pre_op, pre_cl] = getCoord(upfvgBox, upfvg_datasize, 2)
        
        // IF THE NEW ZONE (BOX) IS NOT WITHIN PREVIOUS PLOTTED BOXES
        fvgInPrev = filtFvginFvg ? znInZone(upHi, upLo, pre_upHi, pre_upLo) : false
        
        if not(fvgInPrev)
        
            half = (upHi + upLo) / 2
            
            if uline_mid == na
                uline_mid := line.new(op, half, cl, half, xloc.bar_time, extend.none, color.lime)
                uline_hi := line.new(op, upHi, cl, upHi, xloc.bar_time, extend.none, color.lime)
                uline_lo := line.new(op, upLo, cl, upLo, xloc.bar_time, extend.none, color.lime)
                u_plotted := u_plotted + 1
                
            else if uline_mid != na and u_plotted < plotFvgTop
                if u_plotted == 1 and plotFvgTop > 1
                    uline_mid2 := uline_mid
                    uline_mid := line.new(op, half, cl, half, xloc.bar_time, extend.none, color.lime)
                    
                    uline_hi2 := uline_hi
                    uline_hi := line.new(op, upHi, cl, upHi, xloc.bar_time, extend.none, color.lime)
                    
                    uline_lo2 := uline_lo
                    uline_lo := line.new(op, upLo, cl, upLo, xloc.bar_time, extend.none, color.lime)
                    
                if u_plotted == 2 and plotFvgTop > 2
                    uline_mid3 := uline_mid2
                    uline_mid2 := uline_mid
                    uline_mid := line.new(op, half, cl, half, xloc.bar_time, extend.none, color.lime)
                    
                    uline_hi3 := uline_hi2
                    uline_hi2 := uline_hi
                    uline_hi := line.new(op, upHi, cl, upHi, xloc.bar_time, extend.none, color.lime)
                    
                    uline_lo3 := uline_lo2
                    uline_lo2 := uline_lo
                    uline_lo := line.new(op, upLo, cl, upLo, xloc.bar_time, extend.none, color.lime)
                    
                u_plotted := u_plotted + 1
                
            else if uline_mid != na and u_plotted == plotFvgTop
            
                u_delLine := uline_mid3
                uline_mid3 := uline_mid2
                uline_mid2 := uline_mid
                uline_mid := line.new(op, half, cl, half, xloc.bar_time, extend.none, color.lime)
                line.delete(u_delLine)
                
                u_delHiLine := uline_hi3
                uline_hi3 := uline_hi2
                uline_hi2 := uline_hi
                uline_hi := line.new(op, upHi, cl, upHi, xloc.bar_time, extend.none, color.lime)
                line.delete(u_delHiLine)
                
                u_delLoLine := uline_lo3
                uline_lo3 := uline_lo2
                uline_lo2 := uline_lo
                uline_lo := line.new(op, upLo, cl, upLo, xloc.bar_time, extend.none, color.lime)
                line.delete(u_delLoLine)
                
                u_plotted := u_plotted
// }  

    // LINE STYLING
    // {
    line.set_extend(uline_mid, extend.none)
    line.set_extend(uline_mid2, extend.none)
    line.set_extend(uline_mid3, extend.none)
    
    line.set_style(uline_mid, line.style_dotted)
    line.set_style(uline_mid2, line.style_dotted)
    line.set_style(uline_mid3, line.style_dotted)
    
    line.set_extend(uline_hi, extend.none)
    line.set_extend(uline_hi2, extend.none)
    line.set_extend(uline_hi3, extend.none)
    
    line.set_extend(uline_lo, extend.none)
    line.set_extend(uline_lo2, extend.none)
    line.set_extend(uline_lo3, extend.none)

    line.set_color(uline_mid, plotFvgTop >= 1 ? color.lime : color(na))
    line.set_color(uline_mid2, plotFvgTop >= 2 ? color.new(color.lime, 70) : color(na))
    line.set_color(uline_mid3, plotFvgTop >= 3 ? color.new(color.lime, 40) : color(na))
    
    line.set_color(uline_hi, plotFvgTop >= 1 ? color.lime : color(na))
    line.set_color(uline_hi2, plotFvgTop >= 2 ? color.new(color.lime, 70) : color(na))
    line.set_color(uline_hi3, plotFvgTop >= 3 ? color.new(color.lime, 40) : color(na))
    
    line.set_color(uline_lo, plotFvgTop >= 1 ? color.lime : color(na))
    line.set_color(uline_lo2, plotFvgTop >= 2 ? color.new(color.lime, 70) : color(na))
    line.set_color(uline_lo3, plotFvgTop >= 3 ? color.new(color.lime, 40) : color(na))
    // }

// }

// FVG BELOW
// {
var dline_mid = line(na), var dline_mid2 = line(na), var dline_mid3 = line(na), var d_delLine = line(na), var d_plotted = 0
var dline_hi = line(na), var dline_hi2 = line(na), var dline_hi3 = line(na), var d_delHiLine = line(na)
var dline_lo = line(na), var dline_lo2 = line(na), var dline_lo3 = line(na), var d_delLoLine = line(na)

dnDataChange = change(dnfvg_datasize)
new_dnFvg = not dnboxReplaced ? dnDataChange : dnboxReplaced

dn_openT = dnfvg_datasize > 1 ? box.get_left(array.get(dnfvgBox, dnfvg_datasize - 1)) : 0.0
c_dn_op = change(dn_openT)

// CONDITION
// {
if dnfvg_datasize > 1 and new_dnFvg 
    
    if c_dn_op
        
        [dnHi, dnLo, op, cl] = getCoord(dnfvgBox, dnfvg_datasize, 1)
        [pre_dnHi, pre_dnLo, pre_op, pre_cl] = getCoord(dnfvgBox, dnfvg_datasize, 2)
        
        // IF THE NEW ZONE (BOX) IS NOT WITHIN PREVIOUS PLOTTED BOXES
        fvgInPrev = filtFvginFvg ? znInZone(dnHi, dnLo, pre_dnHi, pre_dnLo) : na
        
        if not(fvgInPrev)

        
            half = (dnHi + dnLo) / 2
            
            if dline_mid == na
                dline_mid := line.new(op, half, cl, half, xloc.bar_time, extend.none, color.maroon)
                dline_hi := line.new(op, dnHi, cl, dnHi, xloc.bar_time, extend.none, color.maroon)
                dline_lo := line.new(op, dnLo, cl, dnLo, xloc.bar_time, extend.none, color.maroon)
                d_plotted := d_plotted + 1
                
            else if dline_mid != na and d_plotted < plotFvgBott
                if d_plotted == 1 and plotFvgBott > 1
                    dline_mid2 := dline_mid
                    dline_mid := line.new(op, half, cl, half, xloc.bar_time, extend.none, color.maroon)
                    
                    dline_hi2 := dline_hi
                    dline_hi := line.new(op, dnHi, cl, dnHi, xloc.bar_time, extend.none, color.maroon)
                    
                    dline_lo2 := dline_lo
                    dline_lo := line.new(op, dnLo, cl, dnLo, xloc.bar_time, extend.none, color.maroon)
                    
                if d_plotted == 2 and plotFvgBott > 2
                    dline_mid3 := dline_mid2
                    dline_mid2 := dline_mid
                    dline_mid := line.new(op, half, cl, half, xloc.bar_time, extend.none, color.maroon)
                    
                    dline_hi3 := dline_hi2
                    dline_hi2 := dline_hi
                    dline_hi := line.new(op, dnHi, cl, dnHi, xloc.bar_time, extend.none, color.maroon)
                    
                    dline_lo3 := dline_lo2
                    dline_lo2 := dline_lo
                    dline_lo := line.new(op, dnLo, cl, dnLo, xloc.bar_time, extend.none, color.maroon)
                    
                d_plotted := d_plotted + 1
                
            else if dline_mid != na and d_plotted == plotFvgBott
            
                d_delLine := dline_mid3
                dline_mid3 := dline_mid2
                dline_mid2 := dline_mid
                dline_mid := line.new(op, half, cl, half, xloc.bar_time, extend.none, color.maroon)
                line.delete(d_delLine)
                
                d_delHiLine := dline_hi3
                dline_hi3 := dline_hi2
                dline_hi2 := dline_hi
                dline_hi := line.new(op, dnHi, cl, dnHi, xloc.bar_time, extend.none, color.maroon)
                line.delete(d_delHiLine)
                
                d_delLoLine := dline_lo3
                dline_lo3 := dline_lo2
                dline_lo2 := dline_lo
                dline_lo := line.new(op, dnLo, cl, dnLo, xloc.bar_time, extend.none, color.maroon)
                line.delete(d_delLoLine)
                
                d_plotted := d_plotted
// }

    // LINE STYLING
    // {
    line.set_extend(dline_mid, extend.none)
    line.set_extend(dline_mid2, extend.none)
    line.set_extend(dline_mid3, extend.none)
    
    line.set_style(dline_mid, line.style_dotted)
    line.set_style(dline_mid2, line.style_dotted)
    line.set_style(dline_mid3, line.style_dotted)
    
    line.set_extend(dline_hi, extend.none)
    line.set_extend(dline_hi2, extend.none)
    line.set_extend(dline_hi3, extend.none)
    
    line.set_extend(dline_lo, extend.none)
    line.set_extend(dline_lo2, extend.none)
    line.set_extend(dline_lo3, extend.none)

    line.set_color(dline_mid, plotFvgBott >= 1 ? color.maroon : color(na))
    line.set_color(dline_mid2, plotFvgBott >= 2 ? color.new(color.maroon, 70) : color(na))
    line.set_color(dline_mid3, plotFvgBott >= 3 ? color.new(color.maroon, 40) : color(na))
    
    line.set_color(dline_hi, plotFvgBott >= 1 ? color.maroon : color(na))
    line.set_color(dline_hi2, plotFvgBott >= 2 ? color.new(color.maroon, 70) : color(na))
    line.set_color(dline_hi3, plotFvgBott >= 3 ? color.new(color.maroon, 40) : color(na))
    
    line.set_color(dline_lo, plotFvgBott >= 1 ? color.maroon : color(na))
    line.set_color(dline_lo2, plotFvgBott >= 2 ? color.new(color.maroon, 70) : color(na))
    line.set_color(dline_lo3, plotFvgBott >= 3 ? color.new(color.maroon, 40) : color(na))
    // }
// }

// }

// }


// >>>>>>>>>>>>>>> ORDER BLOCK <<<<<<<<<<<<<<<//
// {

// PARAMETERS
// {
minCand = input(3, "Minimum Candle for OB Validation", input.integer, minval=2, group="ORDER BLOCK")
maxCand = input(6, "Maximum Candle for OB Validation", input.integer, minval=4, maxval=10, group="ORDER BLOCK", tooltip="Value must be larger than Mininum Candle")

indLimit = input(1, "No-Body Candle Buffer", input.integer, tooltip="Value must be lower than Minimum Candle for OB", group="ORDER BLOCK")

useObDist = input(true, "Filter Orderblock by Reversal Magnitude", input.bool, group="ORDER BLOCK: DISTANCE FILTER")
distMeth = input("Candle Body", "Method to Calculate Reversal Magnitude", options=["Candle Body", "ATR"], group="ORDER BLOCK: DISTANCE FILTER")
distMult = input(2, "Reversal Distance Multiplier", input.float, minval=1.5, step=0.1, group="ORDER BLOCK: DISTANCE FILTER")

upCand = open < close, dnCand = open > close, neutCand = open == close
// }

// CALCULATE ORDER BLOCK INDEX
// {
bullObCandInx = minCand + 1
bearObCandInx = minCand + 1

for i = maxCand + 1 to minCand + 1
    bullCond = false
    
    if dnCand[i]
        bullCond := true
        
    if bullCond 
        bullObCandInx := i
        break

for i = maxCand + 1 to minCand + 1
    bearCond = false
    
    if upCand[i]
        bearCond := true
        
    if bearCond 
        bearObCandInx := i
        break
// }

// ORDER BLOCK SETUP SCANNER
// {

bullSetup = false, bearSetup = false

// FOR BUY
bullObDist = 0

if (dnCand[bullObCandInx])

    for i = maxCand to minCand
        upCount = 0
        for j = i to 1
            if upCand[j]
                upCount += 1
        
        neutCount = 0
        for k = i to 1
            if neutCand[k]
                neutCount += 1
        
        if upCount == i or ((upCount == i - indLimit) and (neutCount == indLimit))
            bullSetup := true
            bullObDist := i + 1
            break
    

// FOR SELL

var bearObDist = 0
if (upCand[bearObCandInx])
    
    bearObDist := 0
    for i = maxCand to minCand
        dnCount = 0
        for j = i to 1
            if dnCand[j]
                dnCount += 1
        
        neutCount = 0
        for k = i to 1
            if neutCand[k]
                neutCount += 1
        
        if dnCount == i or ((dnCount == i - indLimit) and (neutCount == indLimit))
            bearSetup := true
            bearObDist := i + 1
            break

// }

// REVESAL MAGNITUDE VALIDATION
// {
bullObValid = false, bearObValid = false
bullObInx = bullObDist, bearObInx = bearObDist


// Method 1: Candle Body
bullObCand_open = open[bullObInx]
bullObCand_close = close[bullObInx]

bearObCand_open = open[bearObInx]
bearObCand_close = close[bearObInx]

bullObCand_hi = high[bullObInx], bullObCand_lo = low[bullObInx]
bearObCand_hi = high[bearObInx], bearObCand_lo = low[bearObInx]

calcBullRevDist() =>
    totDist = float(0)
    if bullObInx != 0
        for i = bullObInx - 1 to 1
            totDist := (abs(open[i] - close[i])) + totDist
        totDist

calcBearRevDist() =>
    totDist = float(0)
    if bearObInx != 0
        for i = bearObInx - 1 to 1
            totDist := (abs(open[i] - close[i])) + totDist
        totDist

bullObCandDist = abs(bullObCand_open - bullObCand_close)
bearObCandDist = abs(bearObCand_open - bearObCand_close)

bullRevDist = calcBullRevDist(), bearRevDist = calcBearRevDist()

// Method 2: ATR 
distAtr = atr(14)

// Conditions
if bullSetup
    if distMeth == "Candle Body" and (bullRevDist >= (bullObCandDist * distMult))
        bullObValid := true
    
    else if distMeth == "ATR" and (bullRevDist >= (distAtr[bullObInx] * distMult))
        bullObValid := true

if bearSetup
    if distMeth == "Candle Body" and (bearRevDist >= (bearObCandDist * distMult))
        bearObValid := true
    
    else if distMeth == "ATR" and (bearRevDist >= (distAtr[bearObInx] * distMult))
        bearObValid := true

// }

// ORDER BLOCK PLOTTING
// {
b_bullOb = false, b_bearOb = false

if useObDist
    if bullSetup and bullObValid
        b_bullOb := true 
    if bearSetup and bearObValid
        b_bearOb := true
else 
    if bullSetup
        b_bullOb := true 
    if bearSetup
        b_bearOb := true

// }

// }


// >>>>>>>>>>>>>>> CB ORDER BLOCK SCANNER  <<<<<<<<<<<<<<<//
// {

// PARAMETERS
// {
useobfvg = true //input(false, "Use FVG Filter for Order Block", input.bool, group="CB Orderblock Scanner")
histObToSaved = 3 //input(3, "How many Order Block in History should be referenced?", input.integer, maxval=5, minval=1, group="CB Orderblock Scanner")

// }

// STORE NEW OB VALUES
// {

bullObBlocks = array.new_box(histObToSaved + 1, nullbox)


bearObBlocks = array.new_box(histObToSaved + 1, nullbox)

if b_bullOb
    obOp = time[bullObInx], obCl = time
    obHi = bullObCand_hi, obLo = bullObCand_lo
    
    newOb = box.new(obOp, obHi, obCl , obLo, color(na), xloc = xloc.bar_time, bgcolor = color(na))
    
    array.shift(bullObBlocks)
    array.push(bullObBlocks, newOb)

if b_bearOb
    obOp = time[bearObInx], obCl = time
    obHi = bearObCand_hi, obLo = bearObCand_lo
    
    newOb = box.new(obOp, obHi, obCl , obLo, color(na), xloc = xloc.bar_time, bgcolor = color(na))
    
    array.shift(bearObBlocks)
    array.push(bearObBlocks, newOb)

isBullCbOb = false, isBearCbOb = false
conv = periodConv(10, htf) 

// }

// FUNCTIONAL METHOD : CURRENT TIMEFRAME
// {

// upfvgBox, dnfvgBox, upfvg_datasize, dnfvg_datasize
count_bullObFvg = 0, count_bearObFvg = 0

if not (conv != 10)
    
    if b_bullOb and dnfvg_datasize > 3
        for i = bullObCandInx - 3 to 0
            
            if i == 0
                if newFvgBelow
                    count_bullObFvg += 1
                    isBullCbOb := true
                
            else if newFvgBelow[i]
                count_bullObFvg += 1
                isBullCbOb := true


    if b_bearOb and upfvg_datasize > 3
        for i = bearObCandInx - 3 to 0
            
            if i == 0
                if newFvgAbove
                    count_bearObFvg += 1
                    isBearCbOb := true
                
            else if newFvgAbove[i]
                count_bearObFvg += 1
                isBearCbOb := true
    
// }

// EXPERIMENTAL METHOD : HIGHER TIMEFRAME.
// {
if conv != 10
    if newFvgBelow and not(newFvgBelow[1])

        fvgOp = box.get_left(array.get(dnfvgBox, dnfvg_datasize - 1))
        fvgCl = box.get_right(array.get(dnfvgBox, dnfvg_datasize - 1))
        
        for i = 0 to histObToSaved
            obOp = box.get_left(array.get(bullObBlocks, i))
            obCl = box.get_right(array.get(bullObBlocks, i))
            
            if  obOp > fvgOp
                isBullCbOb := true
    
    else if newFvgAbove and not(newFvgAbove[1])

        fvgOp = box.get_left(array.get(upfvgBox, upfvg_datasize - 1))
        fvgCl = box.get_right(array.get(upfvgBox, upfvg_datasize - 1))
        
        for i = 0 to histObToSaved
            obOp = box.get_left(array.get(bearObBlocks, i))
            obCl = box.get_right(array.get(bearObBlocks, i))
            
            // if  boxinbox(fvgOp, fvgCl, obOp, obCl)
            if obOp > fvgOp
                isBearCbOb := true
// }

// PLOTS
// {

obPlotMeth = input("High/Low", "What Values to use for Top/Bottom of Orderblock?", options=["High/Low", "Open/Close", "Dynamic Wick/Body"], group="OB Plots")

upcol = color.new(color.lime, 80) , dncol = color.new(color.red, 80)

bullCbOb = useobfvg ? isBullCbOb : b_bullOb
bearCbOb = useobfvg ? isBearCbOb : b_bearOb

bullObTop = obPlotMeth == "High/Low" ? bullObCand_hi :
  obPlotMeth == "Open/Close" ? max(bullObCand_open, bullObCand_close) : 
  obPlotMeth == "Dynamic Wick/Body" ? max(bullObCand_open, bullObCand_close) : na
  
bullObBott = obPlotMeth == "High/Low" ? bullObCand_lo :
  obPlotMeth == "Open/Close" ? min(bullObCand_open, bullObCand_close) : 
  obPlotMeth == "Dynamic Wick/Body" ? bullObCand_lo : na
  
bearObTop = obPlotMeth == "High/Low" ? bearObCand_hi :
  obPlotMeth == "Open/Close" ? max(bearObCand_open, bearObCand_close) : 
  obPlotMeth == "Dynamic Wick/Body" ? bearObCand_hi : na
  
bearObBott = obPlotMeth == "High/Low" ? bearObCand_lo :
  obPlotMeth == "Open/Close" ? min(bearObCand_open, bearObCand_close) : 
  obPlotMeth == "Dynamic Wick/Body" ? min(bearObCand_open, bearObCand_close) : na

bgcolor(bullCbOb ? color.new(upcol, 90) : bearCbOb ? color.new(dncol, 90) : na)
obTop = plot(bullCbOb ? bullObTop : bearCbOb ? bearObTop : na, "OB Top", bullCbOb ? upcol : bearCbOb ? dncol : na, 2, plot.style_linebr, editable=false)
obBott = plot(bullCbOb ? bullObBott : bearCbOb ? bearObBott : na, "OB Bottom", bullCbOb ? upcol : bearCbOb ? dncol : na, 2, plot.style_linebr, editable=false)

slAtr = atr(14)
plot(bullCbOb ? bullObBott - slAtr : bearCbOb ? bearObTop + slAtr : na, "Stop Loss", color.aqua, 2, plot.style_linebr, editable=false)

// }

// } 


// >>>>>>>>>>>>>>> STRATEGY EXECUTION  <<<<<<<<<<<<<<<//
// {
i_entBuffer = input("Closest FVG to Price", "What Structure Should Be Used for Entry?", options=["Closest FVG to Price", 
  "Closest FVG to Orderblock", "Average of Both FVGs", "Orderblock High/Low"])

// STRATEGY 1:
// Set Limit Order At Valid CB Orderblock or Associated FVG
// {
strategy1_entry = float(na)

if dnfvg_datasize > 2
    
    if bullCbOb and count_bullObFvg > 0
        
        strategy1_entry := i_entBuffer == "Closest FVG to Price" ? box.get_top( array.get(dnfvgBox, array.size(dnfvgBox) - 1) ) :
          i_entBuffer == "Closest FVG to Orderblock" ? box.get_top( array.get(dnfvgBox, array.size(dnfvgBox) - count_bullObFvg) ) : 
          i_entBuffer == "Average of Both FVGs" ? ( ( box.get_top( array.get(dnfvgBox, array.size(dnfvgBox) - 1) ) ) + 
             ( box.get_top( array.get(dnfvgBox, array.size(dnfvgBox) - count_bullObFvg) ) ) ) / 2 : 
          i_entBuffer == "Orderblock High/Low" ? bullObCand_hi : na

if upfvg_datasize > 2
    if bearCbOb and count_bearObFvg > 0
        
        strategy1_entry := i_entBuffer == "Closest FVG to Price" ? box.get_bottom( array.get(upfvgBox, array.size(upfvgBox) - 1) ) :
          i_entBuffer == "Closest FVG to Orderblock" ? box.get_bottom( array.get(upfvgBox, array.size(upfvgBox) - count_bearObFvg) ) : 
          i_entBuffer == "Average of Both FVGs" ? ( ( box.get_bottom( array.get(upfvgBox, array.size(upfvgBox) - 1) ) ) + 
             ( box.get_bottom( array.get(upfvgBox, array.size(upfvgBox) - count_bearObFvg) ) ) ) / 2 :
          i_entBuffer == "Orderblock High/Low" ? bearObCand_lo : na
// }


// STRATEGY 2:
// Upon validated trend direction reversal, wait for price to break most recent (opposite-in-direction) Order Block
// Place Limit Order above or below the market

// STORE MOST RECENT VALUES
// {
var rec_bullTop = 0.0, var rec_bullBott = 0.0
var rec_bearTop = 0.0, var rec_bearBott = 0.0

if bullCbOb
    rec_bullTop := bullObTop
    rec_bullBott := bullObBott
        
if bearCbOb
    rec_bearTop := bearObTop
    rec_bearBott := bearObBott
// }

// FILTER APPLICATION
// {
bullFilterCond = true, bearFilterCond = true  // Listeners for  RSI Oversold or Overbought Conditions

var pendingBull = false, var pendingBear = false

if bullFilterCond
    pendingBull := true
if bearFilterCond
    pendingBear := true


// RESETTING PENDING LISTENERS
if bearCbOb and pendingBull
    pendingBull := false
if bullCbOb and pendingBear
    pendingBear := false
// }

// BREAKOUT FOR LONGS
// {
prevBar2InShortZn = barInZone(rec_bearTop, rec_bearBott, 2)
prevBar2AboveShortZn = (not prevBar2InShortZn) and low[2] > rec_bearTop
prevBar2BelowShortZn = (not prevBar2InShortZn) and high[2] < rec_bearBott

prevBarInShortZn = barInZone(rec_bearTop, rec_bearBott, 1)
prevBarAboveShortZn = (not prevBarInShortZn) and low[1] > rec_bearTop
prevBarBelowShortZn = (not prevBarInShortZn) and high[1] < rec_bearBott

bullBreakout = pendingBull ? prevBar2InShortZn and prevBarAboveShortZn : na

pendingBull := bullBreakout ? false : true
//}

// BREAKOUT FOR SHORTS
// {
prevBar2InLongZn = barInZone(rec_bullTop, rec_bullBott, 2)
prevBar2AboveLongZn = (not prevBar2InLongZn) and low[2] > rec_bullTop
prevBar2BelowLongZn = (not prevBar2InLongZn) and high[2] < rec_bullBott

prevBarInLongZn = barInZone(rec_bullTop, rec_bullBott, 1)
prevBarAboveLongZn = (not prevBarInLongZn) and low[1] > rec_bullTop
prevBarBelowLongZn = (not prevBarInLongZn) and high[1] < rec_bullBott

bearBreakout = pendingBear ? prevBar2InLongZn and prevBarBelowLongZn : na

pendingBear := bearBreakout ? false : true
//}


plot(strategy1_entry, color=color.white, style=plot.style_linebr)
// bgcolor(bullBreakout ? color.orange : bearBreakout ? color.purple : na)
// }