
//@version=4
study("MACD Breakout", overlay=1)


// GENERAL FUNCTIONS
// {
htf(_res, _exp, gaps_on)  => gaps_on == 0 ? security(syminfo.tickerid, _res, _exp) :
  gaps_on == true ? security(syminfo.tickerid, _res, _exp, barmerge.gaps_on, barmerge.lookahead_off ) : 
  security(syminfo.tickerid, _res, _exp, barmerge.gaps_off, barmerge.lookahead_off )
  
barInZone(_top, _bott, _index) => _index == 0 ? (high <= _top and high >= _bott ) or 
  ( low <= _top and low >= _bott) or (high >= _top and low <= _bott) : 
  (high[_index] <= _top and high[_index] >= _bott ) or 
  ( low[_index] <= _top and low[_index] >= _bott) or (high[_index] >= _top and low[_index] <= _bott)
  
znInZone(_top, _bott, _top2, _bott2) => (_top2 <= _top and _top2 >= _bott ) or ( _bott2 <= _top and _bott2 >= _bott) or (_top2 >= _top and _bott2 <= _bott)

lineInZone(_top, _bott, _line) => (_line <= _top and _line >= _bott )

barInTradeZone(_top, _bott, _index) => _index == 0 ? (high < _top and high > _bott ) and ( low < _top and low > _bott)  :
  (high[_index] < _top and high[_index] > _bott ) and ( low[_index] < _top and low[_index] > _bott)

sltotp(_ent, _sl, _rrr) => 
    slDist = abs(_ent - _sl)
    tpDist = (slDist * _rrr)
    tp = _ent > _sl ? _ent + tpDist : _ent - tpDist
    
    tp
//}

// INPUTS 

//*************** MACD ***************//
// {

/// INPUTS
// {
htfRes = input("120", " MACD TimeFrame", input.resolution, group="MACD SETTINGS")
macdflen = input(8, "MACD Fast MA", input.integer, group="MACD SETTINGS")
macdslen = input(17, "macd Slow MA", input.integer, group="MACD SETTINGS")
siglen = input(9, "MACD signal Line", input.integer, group="MACD SETTINGS")
gaps = true
//}

// FUNCTIONS
// {
_macd() =>
    macdSrc     = close
    FastMa = ema(macdSrc, macdflen)
    SlowMa = ema(macdSrc, macdslen)
    macd    = FastMa - SlowMa
    macd
    
_signal() =>

    macdSrc     = close
    FastMa = ema(macdSrc, macdflen)
    SlowMa = ema(macdSrc, macdslen)
    macd    = FastMa - SlowMa
    signal  = ema(macd, siglen)
    signal 

//}

// CALCULATION
// {
macd   = htf(htfRes, _macd(), gaps)
signal = htf(htfRes, _signal(), gaps)

// Calculate hist 
hist    = htf(htfRes, macd - signal, 0)
//}


//}

//=============== FILTERS ===============//
// {

// INPUT
// {
useFilt = input(true, "Use Filter", group="FILTER")
useStFilt = input(false, "Use Stochastic Filter", input.bool, group="FILTER")
useMfFilt = input(true, "Use MF Filter", input.bool, group="FILTER")
useMacdFilt = input(true, "Use Macd Zero Line Filter", input.bool, group="FILTER")
//}

//***** STOCHASTIC RSI *****//
//{

// INPUT
stRsiRes = input("120", "Stoch RSI Timeframe", input.resolution, group="FILTER: STOCHASTIC")
smoothK = input(3, "K", minval=1, group="FILTER: STOCHASTIC")
smoothD = input(3, "D", minval=1, group="FILTER: STOCHASTIC")
lengthRSI = input(14, "RSI Length", minval=1, group="FILTER: STOCHASTIC")
lengthStoch = input(14, "Stochastic Length", minval=1, group="FILTER: STOCHASTIC")
stOb = input(80, "RSI Overbought", group="FILTER: STOCHASTIC")
stOs = input(20, "RSI Oversold", group="FILTER: STOCHASTIC")
src = close

//CALCULATIONS
rsi1 = htf(stRsiRes, rsi(src, lengthRSI), false)
stoch = htf(stRsiRes, sma(stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK), false)
stSignal = htf(stRsiRes, sma(stoch, smoothD), false)

isStOb = stoch >= stOb
isStOs = stoch <= stOs

//}

//***** MONEY FLOW *****//
// {
mfLen = input(14, "Money FLow Length", input.integer, minval=1, maxval=2000, group="FILTER: MONEY FLOW")
mfOb = input(80, "MF Overbought", input.integer, group="FILTER: MONEY FLOW")
mfOs = input(20, "MF Oversold", input.integer, group="FILTER: MONEY FLOW")
mfSrc = hlc3
upper = sum(volume * (change(mfSrc) <= 0 ? 0 : mfSrc), mfLen)
lower = sum(volume * (change(mfSrc) >= 0 ? 0 : mfSrc), mfLen)
_rsi(upper, lower) => 100.0 - (100.0 / (1.0 + upper / lower))
mf = _rsi(upper, lower)
//}
// Signals ==> mf

//===== FILTER EXECUTION =====//
// {
filtLong =
  useMfFilt ? crossover(mf, mfOs) : na
  
filtShort =
  useMfFilt ? crossunder(mf, mfOb) : na

//}

//}

//*************** S/R ZONES ***************//
// {

//MACD HIST PIVOT POINT
histIncBelow = useMacdFilt ? htf(htfRes, rising(hist, 1), 0) and hist < 0 and macd < 0 : 
  htf(htfRes, rising(hist, 1), 0) and hist < 0 
  
histDecAbove = useMacdFilt ? htf(htfRes, falling(hist, 1), 0) and hist > 0 and macd > 0 : 
  htf(htfRes, falling(hist, 1), 0) and hist > 0

startIncBelow = useFilt and useStFilt ? htf(htfRes, histIncBelow[1] == false and histIncBelow == true, 0) and isStOs : 
  htf(htfRes, histIncBelow[1] == false and histIncBelow == true, 0)
  
startDecAbove = useFilt and useStFilt ? htf(htfRes, histDecAbove[1] == false and histDecAbove == true, 0) and isStOb : 
  htf(htfRes, histDecAbove[1] == false and histDecAbove == true, 0) 

/////////////////////////////////////////
//To Mark out zone, mark the highs and the lows of the htf candles
htfbarHigh = htf(htfRes, high, 0)
htfbarLow = htf(htfRes, low, 0)

longZnHigh = startIncBelow ? htfbarHigh : na
longZnLow = startIncBelow ? htfbarLow : na

var longTop = 0.0
var longBott = 0.0

if (startIncBelow)
    longTop := longZnHigh
    longBott := longZnLow
    
shortZnHigh = startDecAbove ? htfbarHigh : na
shortZnLow = startDecAbove ?  htfbarLow : na

var shortTop = 0.0
var shortBott = 0.0

if (startDecAbove)
    shortTop := shortZnHigh
    shortBott := shortZnLow

//}

//*************** STRATEGY EXECUTIONS ***************//
// {

// TRIGGER
// {

// NOTE: This method references two bars behind; Current bar is the execution bar//
// DETECTING ENTRY TRIGGER FOR LONGS 
// {
prevBar2InLongZn = barInZone(longTop, longBott, 2)
prevBar2AboveLongZn = (not prevBar2InLongZn) and low[2] > longTop
prevBar2BelowLongZn = (not prevBar2InLongZn) and high[2] < longBott

prevBarInLongZn = barInZone(longTop, longBott, 1)
prevBarAboveLongZn = (not prevBarInLongZn) and low[1] > longTop
prevBarBelowLongZn = (not prevBarInLongZn) and high[1] < longBott


// Find the first bar to leave the zone, after the new zone forms
barLeavesLongZn = prevBar2InLongZn and (not prevBarInLongZn)

longEntryValid = barLeavesLongZn and low[1] > longTop
longEntryInvalid = barLeavesLongZn and high[1] < longBott
//}

// DETECTING ENTRY TRIGGER FOR SHORTS 
// {
prevBar2InShortZn = barInZone(shortTop, shortBott, 2)
prevBar2AboveShortZn = (not prevBar2InShortZn) and low[2] > shortTop
prevBar2BelowShortZn = (not prevBar2InShortZn) and high[2] < shortBott

prevBarInShortZn = barInZone(shortTop, shortBott, 1)
prevBarAboveShortZn = (not prevBarInShortZn) and low[1] > shortTop
prevBarBelowShortZn = (not prevBarInShortZn) and high[1] < shortBott


// Find the first bar to leave the zone, after the new zone forms
barLeavesShortZn = prevBar2InShortZn and (not prevBarInShortZn)

shortEntryValid = barLeavesShortZn and high[1] < shortBott
shortEntryInvalid = barLeavesShortZn and low[1] > shortTop
//}

//}
/////////////////////////////////////////

// SCREENER
// {
// SCREENING ENTRY CONDITIONS FOR LONGS 
// {
var goLongValid = false
var pendingLong = false

newLongZn = change(longTop) or change(longBott)

if newLongZn
    goLongValid := false
    pendingLong := false

if longEntryInvalid
    goLongValid := false
    pendingLong := false    
    
if barssince(longEntryInvalid) < barssince(newLongZn)
    goLongValid := false
    pendingLong := false
    
else if longEntryValid
    goLongValid := true
    pendingLong := true
    
//}
//Signals ==> pendingLong

// SCREENING ENTRY CONDITIONS FOR SHORTS 
// {
var goShortValid = false
var pendingShort = false

newShortZn = change(shortTop) or change(shortBott)

if newShortZn
    goShortValid := false
    pendingShort := false
    
if shortEntryInvalid
    goShortValid := false
    pendingShort := false    
    
if barssince(shortEntryInvalid) < barssince(newShortZn)
    goShortValid := false
    pendingShort := false
    
if shortEntryValid
    goShortValid := true
    pendingShort := true
//}
//Signals ==> pendingShort
// }
/////////////////////////////////////////

// EXECUTIONS
// {

// FOR STUDY
currBarInLongZn = barInZone(longTop, longBott, 0)
currBarInShortZn = barInZone(shortTop, shortBott, 0)

priceRetouchLong = pendingLong and prevBarAboveLongZn and currBarInLongZn
priceRetouchShort = pendingShort and prevBarBelowShortZn and currBarInShortZn

/////////////////////////////////////////

//FOR STRATEGY

//*** FILTER APPLICATION ***//
var entLongActive = false
var entShortActive = false

if (barssince(filtLong) < barssince(priceRetouchLong))
    entLongActive := true
else 
    entLongActive := false
    
if (barssince(filtShort) < barssince(priceRetouchShort))
    entShortActive := true
else
    entShortActive := false

goLong = useFilt ? priceRetouchLong and (barssince(entLongActive) <= 1) : priceRetouchLong
goShort = useFilt ? priceRetouchShort and (barssince(entShortActive) <= 1) : priceRetouchShort

var entryID = 0

if goLong or goShort
    entryID := entryID + 1

//}

//}

//*************** RISK MANAGEMENT ***************//
// {

// INPUTS
// {
slAtrLen = input(14, "SL ATR Length", input.integer, minval=1, group="RISK MANAGEMENT")
slAtrMult = input(1, "Multiplier", input.float, minval=0.01, step=0.25, group="RISK MANAGEMENT")
tpRRR = input(1.5, "Reward-Risk Ratio", input.float, minval=0.01, step=0.25, group="RISK MANAGEMENT")
//}

//CONDITIONS
// {
slAtr = atr(slAtrLen) * slAtrMult

var slLong = float(na)
var slShort = float(na)
var tpLong = float(na)
var tpShort = float(na)

if goLong
    slLong := longBott - slAtr
    tpLong := sltotp(longTop, slLong, tpRRR)

if goShort
    slShort := shortTop + slAtr
    tpShort  := sltotp(shortBott, slShort, tpRRR)
//}

//}

//*************** POSITION REVERSAL ALGORITHM ***************//
// {

// INPUTS
// {
useRev = input(false, "Take Reverse Entries?", input.bool, group="REVERSE POSITIONS")
revRRR = input(1, "Reward-Risk Ratio For Reverse Positions", input.float, minval=0.01, step=0.25, group="REVERSE POSITIONS")
useRevAtr = input(true, "Add ATR Buffer for Reverse Positions?", input.bool, group="REVERSE POSITIONS")
//}

// CONDITIONS
// {

posLongClosed = barInTradeZone(tpLong, slLong, 1) and (not barInTradeZone(tpLong, slLong, 0)) 
pCLongGain = posLongClosed and (high >= tpLong)
pCLongLoss = posLongClosed and (low <= slLong)

posShortClosed = barInTradeZone(slShort, tpShort, 1) and (not barInTradeZone(tpShort, slShort, 0))
pCShortGain = posShortClosed and (low <= tpShort)
pCShortLoss = posShortClosed and (high >= slShort)
//}

//EXECUTION
//{
var revSlLong = float(na)
var revSlShort = float(na)
var revTpLong = float(na)
var revTpShort = float(na)
var revLongPending = false 
var revShortPending = false

if pCShortLoss
    revSlLong := useRevAtr ? shortBott - slAtr : shortBott
    revTpLong := sltotp(slShort, revSlLong, revRRR)
    revLongPending := true

if pCLongLoss
    revSlShort := useRevAtr ? longTop + slAtr : longTop
    revTpShort := sltotp(slLong, revSlShort, revRRR)
    revShortPending := true
    
posLongActive = barssince(goLong) < barssince(posLongClosed)
posShortActive = barssince(goShort) < barssince(posShortClosed)

var revforEntryID = -1

revGoLong = entryID != revforEntryID ? revLongPending and pCShortLoss and (close > slShort) : na
revGoShort = entryID != revforEntryID ? revShortPending and pCLongLoss and (close < slLong) : na
//}

//}

//*************** VARIABLE RESET ALGORITHM ***************//
//{

// BLOCKS MORE THAN ONE REVERSE ENTRIES
if revGoLong
    revLongPending := false
if revGoShort
    revShortPending := false
    
// RESETS REVERSE ENTRIES WHEN NEW ENTRIES ARE FOUND
if goLong 
    revShortPending := false
if goShort
    revLongPending := false

// ONE REVERSE ENTRY PER TRADE
if revGoLong
    revforEntryID := entryID
if revGoShort
    revforEntryID := entryID

//}

// PLOTS
// {

//PLOTS FOR LONGS
longZnTop = plot(longTop, "Long Zone Top", color.blue, linewidth=2)
longZnBott = plot(longBott, "Long Zone Bottom", color.new(color.blue, 70), linewidth=2)
longZnStop = plot(longBott - slAtr, "Long Zone Stop", color.new(color.gray, 70), linewidth=2)
fill(longZnTop, longZnBott, color.new(color.olive, 75))
fill(longZnStop, longZnBott, color.new(color.olive, 90))

//PLOTS FOR SHORTS
shortZnTop = plot(shortTop, "Short Zone Top", color.new(color.blue, 70), linewidth=2)
shortZnBott = plot(shortBott, "Short Zone Bottom", color.blue, linewidth=2)
shortZnStop = plot(shortTop + slAtr, "Short Zone Stop", color.new(color.gray, 70), linewidth=2)
fill(shortZnTop, shortZnBott, color.new(#e81c34, 75))
fill(shortZnStop, shortZnTop, color.new(#e81c34, 90))

plotshape(goLong, "Long", shape.triangleup, location.belowbar, color.lime, size = size.small)
plotshape(goShort, "Short", shape.triangledown, location.abovebar, color.maroon, size = size.small)

plotshape(useRev ? revGoLong : na, "Reverse Long", shape.triangleup, location.belowbar, color.white, size = size.small, text="Rev Long")
plotshape(useRev ? revGoShort : na, "Reverse Short", shape.triangledown, location.abovebar, color.white, size = size.small, text="Rev Short")

//}